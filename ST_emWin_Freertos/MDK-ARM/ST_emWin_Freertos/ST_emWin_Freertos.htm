<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [ST_emWin_Freertos\ST_emWin_Freertos.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ST_emWin_Freertos\ST_emWin_Freertos.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Dec 11 02:48:27 2023
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[126]">GL_DrawLine1Ex</a>
 <LI><a href="#[127]">GL_DrawPoint</a>
 <LI><a href="#[129]">GL_FillCircle</a>
 <LI><a href="#[14f]">GL_FillPolygon</a>
 <LI><a href="#[265]">GUICC_M1555I_SetCustColorConv</a>
 <LI><a href="#[267]">GUICC_M4444I_SetCustColorConv</a>
 <LI><a href="#[266]">GUICC_M565_SetCustColorConv</a>
 <LI><a href="#[269]">GUICC_M8888I_SetCustColorConv</a>
 <LI><a href="#[268]">GUICC_M888_SetCustColorConv</a>
 <LI><a href="#[105]">GUIMONO_DispChar</a>
 <LI><a href="#[106]">GUIMONO_GetCharDistX</a>
 <LI><a href="#[107]">GUIMONO_GetFontInfo</a>
 <LI><a href="#[108]">GUIMONO_IsInFont</a>
 <LI><a href="#[fa]">GUIPROP_DispChar</a>
 <LI><a href="#[fb]">GUIPROP_GetCharDistX</a>
 <LI><a href="#[fc]">GUIPROP_GetFontInfo</a>
 <LI><a href="#[fd]">GUIPROP_IsInFont</a>
 <LI><a href="#[130]">GUITASK_CopyContext</a>
 <LI><a href="#[132]">GUITASK_Init</a>
 <LI><a href="#[136]">GUI_ALLOC_AllocNoInit</a>
 <LI><a href="#[13a]">GUI_ALLOC_AllocZero</a>
 <LI><a href="#[1ea]">GUI_ALLOC_AssignMemory</a>
 <LI><a href="#[13b]">GUI_ALLOC_Free</a>
 <LI><a href="#[145]">GUI_ALLOC_FreeFixedBlock</a>
 <LI><a href="#[134]">GUI_ALLOC_GetFixedBlock</a>
 <LI><a href="#[16c]">GUI_ALLOC_LockH</a>
 <LI><a href="#[16d]">GUI_ALLOC_UnlockH</a>
 <LI><a href="#[1a3]">GUI_ALLOC_h2p</a>
 <LI><a href="#[1bb]">GUI_CalcColorDist</a>
 <LI><a href="#[13f]">GUI_Clear</a>
 <LI><a href="#[143]">GUI_DEVICE_CreateAndLink</a>
 <LI><a href="#[144]">GUI_DEVICE_Delete</a>
 <LI><a href="#[16a]">GUI_DEVICE_LinkDevices</a>
 <LI><a href="#[198]">GUI_DEVICE_Unlink</a>
 <LI><a href="#[169]">GUI_DEVICE_UnlinkTaskDevices</a>
 <LI><a href="#[17c]">GUI_DEVICE__GetpDriver</a>
 <LI><a href="#[14d]">GUI_DispStringAt</a>
 <LI><a href="#[14e]">GUI_DrawLine</a>
 <LI><a href="#[150]">GUI_FillCircle</a>
 <LI><a href="#[151]">GUI_FillRect</a>
 <LI><a href="#[173]">GUI_GetBitsPerPixelEx</a>
 <LI><a href="#[12e]">GUI_GetBkColor</a>
 <LI><a href="#[154]">GUI_GetCharDistX</a>
 <LI><a href="#[155]">GUI_GetCharDistXEx</a>
 <LI><a href="#[12d]">GUI_GetColor</a>
 <LI><a href="#[157]">GUI_GetDrawMode</a>
 <LI><a href="#[147]">GUI_GetFontDistY</a>
 <LI><a href="#[158]">GUI_GetLayerPosEx</a>
 <LI><a href="#[15a]">GUI_GetPixelIndex</a>
 <LI><a href="#[184]">GUI_GetVersionString</a>
 <LI><a href="#[148]">GUI_GetYAdjust</a>
 <LI><a href="#[175]">GUI_GetpfColor2IndexEx</a>
 <LI><a href="#[174]">GUI_GetpfIndex2ColorEx</a>
 <LI><a href="#[140]">GUI_GotoXY</a>
 <LI><a href="#[15b]">GUI_Index2Color</a>
 <LI><a href="#[15c]">GUI_Init</a>
 <LI><a href="#[137]">GUI_Lock</a>
 <LI><a href="#[16b]">GUI_MEMDEV_Delete</a>
 <LI><a href="#[170]">GUI_MEMDEV_GetBitsPerPixel</a>
 <LI><a href="#[172]">GUI_MEMDEV_GetDataPtr</a>
 <LI><a href="#[8d]">GUI_MEMDEV__WriteToActiveOpaque</a>
 <LI><a href="#[220]">GUI_MULTIBUF_ConfirmEx</a>
 <LI><a href="#[1c2]">GUI_MergeRect</a>
 <LI><a href="#[1af]">GUI_MoveRect</a>
 <LI><a href="#[1b8]">GUI_RectsIntersect</a>
 <LI><a href="#[16f]">GUI_SelectLCD</a>
 <LI><a href="#[17b]">GUI_SelectLayer</a>
 <LI><a href="#[17d]">GUI_SetBkColor</a>
 <LI><a href="#[12f]">GUI_SetColor</a>
 <LI><a href="#[180]">GUI_SetFont</a>
 <LI><a href="#[26a]">GUI_SetFuncDrawAlpha</a>
 <LI><a href="#[166]">GUI_SetOrg</a>
 <LI><a href="#[182]">GUI_SignalEvent</a>
 <LI><a href="#[181]">GUI_StoreKey</a>
 <LI><a href="#[188]">GUI_UC__GetCharCodeInc</a>
 <LI><a href="#[14c]">GUI_UC__NumChars2NumBytes</a>
 <LI><a href="#[1bc]">GUI_USAGE_AddRect</a>
 <LI><a href="#[16e]">GUI_USAGE_DecUseCnt</a>
 <LI><a href="#[139]">GUI_Unlock</a>
 <LI><a href="#[176]">GUI__CompactPixelIndices</a>
 <LI><a href="#[15d]">GUI__Config</a>
 <LI><a href="#[14b]">GUI__DispLine</a>
 <LI><a href="#[14a]">GUI__GetLineDistX</a>
 <LI><a href="#[149]">GUI__GetLineNumChars</a>
 <LI><a href="#[1b0]">GUI__IntersectRect</a>
 <LI><a href="#[19a]">GUI__IntersectRects</a>
 <LI><a href="#[189]">GUI__ManageCache</a>
 <LI><a href="#[133]">GUI__RegisterExit</a>
 <LI><a href="#[18a]">GUI__memset</a>
 <LI><a href="#[1bd]">GUI__memset16</a>
 <LI><a href="#[193]">LCD_Color2Index</a>
 <LI><a href="#[b1]">LCD_Color2Index_8666</a>
 <LI><a href="#[12b]">LCD_DrawBitmap</a>
 <LI><a href="#[e9]">LCD_DrawHLine</a>
 <LI><a href="#[ea]">LCD_DrawPixel</a>
 <LI><a href="#[128]">LCD_DrawVLine</a>
 <LI><a href="#[12c]">LCD_FillRect</a>
 <LI><a href="#[18b]">LCD_GetBitsPerPixelEx</a>
 <LI><a href="#[152]">LCD_GetBkColorIndex</a>
 <LI><a href="#[156]">LCD_GetColorIndex</a>
 <LI><a href="#[18c]">LCD_GetMirrorXEx</a>
 <LI><a href="#[18d]">LCD_GetMirrorYEx</a>
 <LI><a href="#[18e]">LCD_GetNumColors</a>
 <LI><a href="#[18f]">LCD_GetNumColorsEx</a>
 <LI><a href="#[190]">LCD_GetNumLayers</a>
 <LI><a href="#[191]">LCD_GetPalette</a>
 <LI><a href="#[159]">LCD_GetPosEx</a>
 <LI><a href="#[192]">LCD_GetSwapXYEx</a>
 <LI><a href="#[161]">LCD_GetXSizeDisplay</a>
 <LI><a href="#[163]">LCD_GetXSizeMax</a>
 <LI><a href="#[162]">LCD_GetYSizeDisplay</a>
 <LI><a href="#[164]">LCD_GetYSizeMax</a>
 <LI><a href="#[b]">LCD_GetpPalConvTableBM</a>
 <LI><a href="#[153]">LCD_Index2Color</a>
 <LI><a href="#[cc]">LCD_Index2Color_565</a>
 <LI><a href="#[b2]">LCD_Index2Color_8666</a>
 <LI><a href="#[d1]">LCD_Index2Color_888</a>
 <LI><a href="#[d6]">LCD_Index2Color_8888</a>
 <LI><a href="#[db]">LCD_Index2Color_M565</a>
 <LI><a href="#[e0]">LCD_Index2Color_M888</a>
 <LI><a href="#[c7]">LCD_Index2Color_M8888I</a>
 <LI><a href="#[194]">LCD_InitColors</a>
 <LI><a href="#[195]">LCD_InitLUT</a>
 <LI><a href="#[178]">LCD_SelectLCD</a>
 <LI><a href="#[17e]">LCD_SetBkColor</a>
 <LI><a href="#[1a0]">LCD_SetBkColorIndex</a>
 <LI><a href="#[199]">LCD_SetClipRectEx</a>
 <LI><a href="#[197]">LCD_SetClipRectMax</a>
 <LI><a href="#[17f]">LCD_SetColor</a>
 <LI><a href="#[19f]">LCD_SetColorIndex</a>
 <LI><a href="#[19b]">LCD_SetDevFunc</a>
 <LI><a href="#[165]">LCD_SetDisplaySize</a>
 <LI><a href="#[12a]">LCD_SetDrawMode</a>
 <LI><a href="#[196]">LCD_SetLUTEntryEx</a>
 <LI><a href="#[19c]">LCD_SetSizeEx</a>
 <LI><a href="#[19d]">LCD_SetVRAMAddrEx</a>
 <LI><a href="#[19e]">LCD_SetVSizeEx</a>
 <LI><a href="#[179]">LCD_UpdateColorIndices</a>
 <LI><a href="#[177]">LCD__DrawBitmap_1bpp</a>
 <LI><a href="#[171]">LCD__GetBPPDevice</a>
 <LI><a href="#[17a]">WM_Activate</a>
 <LI><a href="#[1a1]">WM_BringToBottom</a>
 <LI><a href="#[1a5]">WM_CreateWindowAsChild</a>
 <LI><a href="#[1a9]">WM_DefaultProc</a>
 <LI><a href="#[1c1]">WM_GetDesktopWindow</a>
 <LI><a href="#[1ac]">WM_GetFirstChild</a>
 <LI><a href="#[1ad]">WM_GetParent</a>
 <LI><a href="#[167]">WM_Init</a>
 <LI><a href="#[1b4]">WM_InvalidateWindowAndDescsEx</a>
 <LI><a href="#[1ab]">WM_SendToParent</a>
 <LI><a href="#[1b5]">WM__ActivateClipRect</a>
 <LI><a href="#[1ae]">WM__AddCriticalHandle</a>
 <LI><a href="#[1aa]">WM__GetClientRectEx</a>
 <LI><a href="#[1b6]">WM__GetClientRectWin</a>
 <LI><a href="#[142]">WM__GetNextIVR</a>
 <LI><a href="#[1a2]">WM__GetPrevSibling</a>
 <LI><a href="#[141]">WM__InitIVRSearch</a>
 <LI><a href="#[1a6]">WM__InsertWindowIntoList</a>
 <LI><a href="#[1b2]">WM__InvalidateDrawAndDescs</a>
 <LI><a href="#[1b3]">WM__InvalidateRect</a>
 <LI><a href="#[1a4]">WM__InvalidateRectEx</a>
 <LI><a href="#[1a7]">WM__SendMessage</a>
 <LI><a href="#[160]">emWin_LCD_Init</a>
 <LI><a href="#[a6]">_Color2Index_1616I</a>
 <LI><a href="#[a7]">_Index2Color_1616I</a>
 <LI><a href="#[a8]">_GetIndexMask_1616I</a>
 <LI><a href="#[a9]">_Color2IndexBulk_1616I</a>
 <LI><a href="#[aa]">_Index2ColorBulk_1616I</a>
 <LI><a href="#[ab]">_Color2Index_822216</a>
 <LI><a href="#[ac]">_Index2Color_822216</a>
 <LI><a href="#[ad]">_GetIndexMask_822216</a>
 <LI><a href="#[ae]">_Color2Index_84444</a>
 <LI><a href="#[b0]">_GetIndexMask_84444</a>
 <LI><a href="#[af]">_Index2Color_84444</a>
 <LI><a href="#[b3]">_GetIndexMask_8666</a>
 <LI><a href="#[b6]">_GetIndexMask_8666_1</a>
 <LI><a href="#[b4]">_Color2Index_8666_1</a>
 <LI><a href="#[b5]">_Index2Color_8666_1</a>
 <LI><a href="#[b7]">_Color2Index_88666I</a>
 <LI><a href="#[b8]">_Index2Color_88666I</a>
 <LI><a href="#[b9]">_GetIndexMask_88666I</a>
 <LI><a href="#[ba]">_Color2IndexBulk_88666I</a>
 <LI><a href="#[bb]">_Index2ColorBulk_88666I</a>
 <LI><a href="#[bc]">_Color2Index_M1555I</a>
 <LI><a href="#[bd]">_Index2Color_M1555I</a>
 <LI><a href="#[be]">_GetIndexMask_M1555I</a>
 <LI><a href="#[bf]">_Color2IndexBulk_M1555I</a>
 <LI><a href="#[c0]">_Index2ColorBulk_M1555I</a>
 <LI><a href="#[c1]">_Color2Index_M4444I</a>
 <LI><a href="#[c2]">_Index2Color_M4444I</a>
 <LI><a href="#[c3]">_GetIndexMask_M4444I</a>
 <LI><a href="#[c4]">_Color2IndexBulk_M4444I</a>
 <LI><a href="#[c5]">_Index2ColorBulk_M4444I</a>
 <LI><a href="#[c6]">_Color2Index_M8888I</a>
 <LI><a href="#[c8]">_GetIndexMask_M8888I</a>
 <LI><a href="#[c9]">_Color2IndexBulk_M8888I</a>
 <LI><a href="#[ca]">_Index2ColorBulk_M8888I</a>
 <LI><a href="#[cb]">_Color2Index_565</a>
 <LI><a href="#[cd]">_GetIndexMask_565</a>
 <LI><a href="#[ce]">_Color2IndexBulk</a>
 <LI><a href="#[cf]">_Index2ColorBulk</a>
 <LI><a href="#[d0]">_Color2Index_888</a>
 <LI><a href="#[d2]">_GetIndexMask_888</a>
 <LI><a href="#[d3]">_Color2IndexBulk</a>
 <LI><a href="#[d4]">_Index2ColorBulk</a>
 <LI><a href="#[d5]">_Color2Index_8888</a>
 <LI><a href="#[d7]">_GetIndexMask_8888</a>
 <LI><a href="#[d8]">_Color2IndexBulk</a>
 <LI><a href="#[d9]">_Index2ColorBulk</a>
 <LI><a href="#[da]">_Color2Index_M565</a>
 <LI><a href="#[dc]">_GetIndexMask_M565</a>
 <LI><a href="#[dd]">_Color2IndexBulk</a>
 <LI><a href="#[de]">_Index2ColorBulk</a>
 <LI><a href="#[df]">_Color2Index_M888</a>
 <LI><a href="#[e1]">_GetIndexMask_M888</a>
 <LI><a href="#[e2]">_Color2IndexBulk</a>
 <LI><a href="#[e3]">_Index2ColorBulk</a>
 <LI><a href="#[e4]">_Color2Index_M8888</a>
 <LI><a href="#[e6]">_GetIndexMask_M8888</a>
 <LI><a href="#[e7]">_Color2IndexBulk</a>
 <LI><a href="#[e8]">_Index2ColorBulk</a>
 <LI><a href="#[e5]">_Index2Color_M8888</a>
 <LI><a href="#[13c]">_AddFreeMemory</a>
 <LI><a href="#[13e]">_RemoveHoles</a>
 <LI><a href="#[13d]">_EnlargeBlocks</a>
 <LI><a href="#[138]">_Alloc</a>
 <LI><a href="#[15f]">_InitContext</a>
 <LI><a href="#[77]">_OnExit</a>
 <LI><a href="#[146]">GUI_DispString.part.0</a>
 <LI><a href="#[ec]">_SetBkColor</a>
 <LI><a href="#[eb]">_SetColor</a>
 <LI><a href="#[ed]">_SetDrawMode</a>
 <LI><a href="#[f9]">_GetRect</a>
 <LI><a href="#[f3]">_SetPixelIndex</a>
 <LI><a href="#[f2]">_GetPixelIndex</a>
 <LI><a href="#[f4]">_XorPixel</a>
 <LI><a href="#[f7]">_GetDevProp</a>
 <LI><a href="#[f8]">_GetDevData</a>
 <LI><a href="#[80]">_ReadRect</a>
 <LI><a href="#[f6]">_GetDevFunc</a>
 <LI><a href="#[7b]">_SetVRAMAddr</a>
 <LI><a href="#[7c]">_SetVis</a>
 <LI><a href="#[7d]">_GetPos</a>
 <LI><a href="#[7e]">_SetPos</a>
 <LI><a href="#[7f]">_SetAlpha</a>
 <LI><a href="#[81]">_SetVRAM_BufferPTR</a>
 <LI><a href="#[82]">_ShowBuffer</a>
 <LI><a href="#[83]">_CopyBuffer</a>
 <LI><a href="#[84]">_SetDevFunc</a>
 <LI><a href="#[85]">_SetChroma</a>
 <LI><a href="#[86]">_SetChromaMode</a>
 <LI><a href="#[87]">_SetAlphaMode</a>
 <LI><a href="#[88]">_Off</a>
 <LI><a href="#[89]">_On</a>
 <LI><a href="#[8a]">_Init</a>
 <LI><a href="#[8b]">_SetSize</a>
 <LI><a href="#[8c]">_SetVSize</a>
 <LI><a href="#[f5]">_SetOrg</a>
 <LI><a href="#[f1]">_FillRect</a>
 <LI><a href="#[ef]">_DrawHLine</a>
 <LI><a href="#[f0]">_DrawVLine</a>
 <LI><a href="#[ee]">_DrawBitmap</a>
 <LI><a href="#[79]">_OnExit</a>
 <LI><a href="#[1bf]">_Findy1</a>
 <LI><a href="#[1be]">_Findx0</a>
 <LI><a href="#[1b9]">_Findx1</a>
 <LI><a href="#[1b7]">_Findx0.constprop.10</a>
 <LI><a href="#[1ba]">_Findy1.constprop.11</a>
 <LI><a href="#[1b1]">_Invalidate1Abs</a>
 <LI><a href="#[1a8]">WM_InvalidateRect.part.2</a>
 <LI><a href="#[7a]">_cbBackWin</a>
 <LI><a href="#[fe]">_Color2Index_16</a>
 <LI><a href="#[ff]">_Index2Color_16</a>
 <LI><a href="#[100]">_GetIndexMask_16</a>
 <LI><a href="#[c]">_Log2VisBuffered</a>
 <LI><a href="#[187]">_DispLine</a>
 <LI><a href="#[76]">_OnExit</a>
 <LI><a href="#[101]">_GetCharCode</a>
 <LI><a href="#[102]">_GetCharSize</a>
 <LI><a href="#[103]">_CalcSizeOfChar</a>
 <LI><a href="#[104]">_Encode</a>
 <LI><a href="#[78]">_OnExit</a>
 <LI><a href="#[113]">_GetDevData</a>
 <LI><a href="#[111]">_GetDevFunc</a>
 <LI><a href="#[110]">_SetOrg</a>
 <LI><a href="#[114]">_GetRect</a>
 <LI><a href="#[109]">_DrawBitmap</a>
 <LI><a href="#[112]">_GetDevProp</a>
 <LI><a href="#[10d]">_GetPixelIndex</a>
 <LI><a href="#[10e]">_SetPixelIndex</a>
 <LI><a href="#[10f]">_XorPixel</a>
 <LI><a href="#[10c]">_FillRect</a>
 <LI><a href="#[10a]">_DrawHLine</a>
 <LI><a href="#[10b]">_DrawVLine</a>
 <LI><a href="#[117]">_GetIndexMask_0</a>
 <LI><a href="#[116]">_Index2Color_0</a>
 <LI><a href="#[115]">_Color2Index_0</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC_IRQHandler</a><BR>
 <LI><a href="#[13d]">_EnlargeBlocks</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[138]">_Alloc</a><BR>
 <LI><a href="#[13]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BusFault_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[12]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">MemManage_Handler</a><BR>
 <LI><a href="#[1bf]">_Findy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bf]">_Findy1</a><BR>
 <LI><a href="#[1be]">_Findx0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1be]">_Findx0</a><BR>
 <LI><a href="#[1b9]">_Findx1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b9]">_Findx1</a><BR>
 <LI><a href="#[14]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">UsageFault_Handler</a><BR>
 <LI><a href="#[1b3]">WM__InvalidateRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b3]">WM__InvalidateRect</a><BR>
 <LI><a href="#[1b4]">WM_InvalidateWindowAndDescsEx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b4]">WM_InvalidateWindowAndDescsEx</a><BR>
 <LI><a href="#[1ab]">WM_SendToParent</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a7]">WM__SendMessage</a><BR>
 <LI><a href="#[1b2]">WM__InvalidateDrawAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b2]">WM__InvalidateDrawAndDescs</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[72]">DMA2D_IRQHandler</a> from stm32f4xx_it.o(i.DMA2D_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[105]">GUIMONO_DispChar</a> from GUI_CharM.o(.text.GUIMONO_DispChar) referenced 2 times from F6x8.o(.rodata)
 <LI><a href="#[106]">GUIMONO_GetCharDistX</a> from GUI_CharM.o(.text.GUIMONO_GetCharDistX) referenced 2 times from F6x8.o(.rodata)
 <LI><a href="#[107]">GUIMONO_GetFontInfo</a> from GUI_CharM.o(.text.GUIMONO_GetFontInfo) referenced 2 times from F6x8.o(.rodata)
 <LI><a href="#[108]">GUIMONO_IsInFont</a> from GUI_CharM.o(.text.GUIMONO_IsInFont) referenced 2 times from F6x8.o(.rodata)
 <LI><a href="#[fa]">GUIPROP_DispChar</a> from GUI_CharP.o(.text.GUIPROP_DispChar) referenced 4 times from F20B_1.o(.rodata)
 <LI><a href="#[fb]">GUIPROP_GetCharDistX</a> from GUI_CharP.o(.text.GUIPROP_GetCharDistX) referenced 4 times from F20B_1.o(.rodata)
 <LI><a href="#[fc]">GUIPROP_GetFontInfo</a> from GUI_CharP.o(.text.GUIPROP_GetFontInfo) referenced 4 times from F20B_1.o(.rodata)
 <LI><a href="#[fd]">GUIPROP_IsInFont</a> from GUI_CharP.o(.text.GUIPROP_IsInFont) referenced 4 times from F20B_1.o(.rodata)
 <LI><a href="#[8d]">GUI_MEMDEV__WriteToActiveOpaque</a> from GUIDEV_WriteToActiveOpaque.o(.text.GUI_MEMDEV__WriteToActiveOpaque) referenced from GUIDEV_16.o(.text._GetDevFunc)
 <LI><a href="#[68]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b1]">LCD_Color2Index_8666</a> from GUICC_8666.o(.text.LCD_Color2Index_8666) referenced from GUICC_8666.o(.rodata)
 <LI><a href="#[e9]">LCD_DrawHLine</a> from LCD.o(.text.LCD_DrawHLine) referenced from GUI_Core.o(.rodata)
 <LI><a href="#[ea]">LCD_DrawPixel</a> from LCD.o(.text.LCD_DrawPixel) referenced from GUI_Core.o(.rodata)
 <LI><a href="#[b]">LCD_GetpPalConvTableBM</a> from LCD_Color.o(.text.LCD_GetpPalConvTableBM) referenced 2 times from GUI_Core.o(.data)
 <LI><a href="#[cc]">LCD_Index2Color_565</a> from GUICC_565.o(.text.LCD_Index2Color_565) referenced from GUICC_565.o(.rodata)
 <LI><a href="#[b2]">LCD_Index2Color_8666</a> from GUICC_8666.o(.text.LCD_Index2Color_8666) referenced from GUICC_8666.o(.rodata)
 <LI><a href="#[d1]">LCD_Index2Color_888</a> from GUICC_888_Index2Color.o(.text.LCD_Index2Color_888) referenced from GUICC_888.o(.rodata)
 <LI><a href="#[d6]">LCD_Index2Color_8888</a> from GUICC_8888_Index2Color.o(.text.LCD_Index2Color_8888) referenced from GUICC_8888.o(.rodata)
 <LI><a href="#[db]">LCD_Index2Color_M565</a> from GUICC_M565.o(.text.LCD_Index2Color_M565) referenced from GUICC_M565.o(.rodata)
 <LI><a href="#[e0]">LCD_Index2Color_M888</a> from GUICC_M888_Index2Color.o(.text.LCD_Index2Color_M888) referenced from GUICC_M888.o(.rodata)
 <LI><a href="#[c7]">LCD_Index2Color_M8888I</a> from GUICC_M8888I_Index2Color.o(.text.LCD_Index2Color_M8888I) referenced from GUICC_M8888I.o(.rodata)
 <LI><a href="#[90]">LCD_LL_CopyBuffer</a> from stemwin_wrapper.o(i.LCD_LL_CopyBuffer) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[91]">LCD_LL_CopyRect</a> from stemwin_wrapper.o(i.LCD_LL_CopyRect) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[93]">LCD_LL_DrawBitmap16bpp</a> from stemwin_wrapper.o(i.LCD_LL_DrawBitmap16bpp) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[94]">LCD_LL_DrawBitmap32bpp</a> from stemwin_wrapper.o(i.LCD_LL_DrawBitmap32bpp) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[92]">LCD_LL_DrawBitmap8bpp</a> from stemwin_wrapper.o(i.LCD_LL_DrawBitmap8bpp) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[8f]">LCD_LL_FillRect</a> from stemwin_wrapper.o(i.LCD_LL_FillRect) referenced from stemwin_wrapper.o(i.LCD_LL_FillRect)
 <LI><a href="#[8f]">LCD_LL_FillRect</a> from stemwin_wrapper.o(i.LCD_LL_FillRect) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[71]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[70]">LTDC_IRQHandler</a> from stm32f4xx_it.o(i.LTDC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1c]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6f]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6d]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6e]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a3]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a4]">StartTask02</a> from freertos.o(i.StartTask02) referenced from freertos.o(.constdata)
 <LI><a href="#[a5]">StartTask03</a> from freertos.o(i.StartTask03) referenced from freertos.o(.constdata)
 <LI><a href="#[18]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[74]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[1b]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8e]">TransferComplete</a> from stemwin_wrapper.o(i.TransferComplete) referenced from stemwin_wrapper.o(i.DMA2D_Init)
 <LI><a href="#[4d]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6a]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6b]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[103]">_CalcSizeOfChar</a> from GUI_UC_EncodeNone.o(.text._CalcSizeOfChar) referenced from GUI_UC_EncodeNone.o(.rodata)
 <LI><a href="#[ce]">_Color2IndexBulk</a> from GUICC_565.o(.text._Color2IndexBulk) referenced 6 times from GUICC_565.o(.rodata)
 <LI><a href="#[a9]">_Color2IndexBulk_1616I</a> from GUICC_1616I.o(.text._Color2IndexBulk_1616I) referenced from GUICC_1616I.o(.rodata)
 <LI><a href="#[ba]">_Color2IndexBulk_88666I</a> from GUICC_88666I.o(.text._Color2IndexBulk_88666I) referenced from GUICC_88666I.o(.rodata)
 <LI><a href="#[bf]">_Color2IndexBulk_M1555I</a> from GUICC_M1555I.o(.text._Color2IndexBulk_M1555I) referenced from GUICC_M1555I.o(.rodata)
 <LI><a href="#[96]">_Color2IndexBulk_M1555I_DMA2D</a> from stemwin_wrapper.o(i._Color2IndexBulk_M1555I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[c4]">_Color2IndexBulk_M4444I</a> from GUICC_M4444I.o(.text._Color2IndexBulk_M4444I) referenced from GUICC_M4444I.o(.rodata)
 <LI><a href="#[9a]">_Color2IndexBulk_M4444I_DMA2D</a> from stemwin_wrapper.o(i._Color2IndexBulk_M4444I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[98]">_Color2IndexBulk_M565_DMA2D</a> from stemwin_wrapper.o(i._Color2IndexBulk_M565_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[c9]">_Color2IndexBulk_M8888I</a> from GUICC_M8888I.o(.text._Color2IndexBulk_M8888I) referenced from GUICC_M8888I.o(.rodata)
 <LI><a href="#[9e]">_Color2IndexBulk_M8888I_DMA2D</a> from stemwin_wrapper.o(i._Color2IndexBulk_M8888I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[9c]">_Color2IndexBulk_M888_DMA2D</a> from stemwin_wrapper.o(i._Color2IndexBulk_M888_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[115]">_Color2Index_0</a> from GUICC_0.o(.text._Color2Index_0) referenced from GUICC_0.o(.rodata)
 <LI><a href="#[fe]">_Color2Index_16</a> from GUICC_16.o(.text._Color2Index_16) referenced from GUICC_16.o(.rodata)
 <LI><a href="#[a6]">_Color2Index_1616I</a> from GUICC_1616I.o(.text._Color2Index_1616I) referenced from GUICC_1616I.o(.rodata)
 <LI><a href="#[cb]">_Color2Index_565</a> from GUICC_565.o(.text._Color2Index_565) referenced from GUICC_565.o(.rodata)
 <LI><a href="#[ab]">_Color2Index_822216</a> from GUICC_822216.o(.text._Color2Index_822216) referenced from GUICC_822216.o(.rodata)
 <LI><a href="#[ae]">_Color2Index_84444</a> from GUICC_84444.o(.text._Color2Index_84444) referenced from GUICC_84444.o(.rodata)
 <LI><a href="#[b4]">_Color2Index_8666_1</a> from GUICC_8666_1.o(.text._Color2Index_8666_1) referenced from GUICC_8666_1.o(.rodata)
 <LI><a href="#[b7]">_Color2Index_88666I</a> from GUICC_88666I.o(.text._Color2Index_88666I) referenced from GUICC_88666I.o(.rodata)
 <LI><a href="#[d0]">_Color2Index_888</a> from GUICC_888.o(.text._Color2Index_888) referenced from GUICC_888.o(.rodata)
 <LI><a href="#[d5]">_Color2Index_8888</a> from GUICC_8888.o(.text._Color2Index_8888) referenced from GUICC_8888.o(.rodata)
 <LI><a href="#[bc]">_Color2Index_M1555I</a> from GUICC_M1555I.o(.text._Color2Index_M1555I) referenced from GUICC_M1555I.o(.rodata)
 <LI><a href="#[c1]">_Color2Index_M4444I</a> from GUICC_M4444I.o(.text._Color2Index_M4444I) referenced from GUICC_M4444I.o(.rodata)
 <LI><a href="#[da]">_Color2Index_M565</a> from GUICC_M565.o(.text._Color2Index_M565) referenced from GUICC_M565.o(.rodata)
 <LI><a href="#[df]">_Color2Index_M888</a> from GUICC_M888.o(.text._Color2Index_M888) referenced from GUICC_M888.o(.rodata)
 <LI><a href="#[e4]">_Color2Index_M8888</a> from GUICC_M8888.o(.text._Color2Index_M8888) referenced from GUICC_M8888.o(.rodata)
 <LI><a href="#[c6]">_Color2Index_M8888I</a> from GUICC_M8888I.o(.text._Color2Index_M8888I) referenced from GUICC_M8888I.o(.rodata)
 <LI><a href="#[83]">_CopyBuffer</a> from GUIDRV_Lin_16.o(.text._CopyBuffer) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[ee]">_DrawBitmap</a> from GUIDRV_Lin_16.o(.text._DrawBitmap) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[ef]">_DrawHLine</a> from GUIDRV_Lin_16.o(.text._DrawHLine) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[f0]">_DrawVLine</a> from GUIDRV_Lin_16.o(.text._DrawVLine) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[104]">_Encode</a> from GUI_UC_EncodeNone.o(.text._Encode) referenced from GUI_UC_EncodeNone.o(.rodata)
 <LI><a href="#[f1]">_FillRect</a> from GUIDRV_Lin_16.o(.text._FillRect) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[101]">_GetCharCode</a> from GUI_UC_EncodeNone.o(.text._GetCharCode) referenced from GUI_UC_EncodeNone.o(.rodata)
 <LI><a href="#[102]">_GetCharSize</a> from GUI_UC_EncodeNone.o(.text._GetCharSize) referenced from GUI_UC_EncodeNone.o(.rodata)
 <LI><a href="#[f8]">_GetDevData</a> from GUIDRV_Lin_16.o(.text._GetDevData) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[f6]">_GetDevFunc</a> from GUIDRV_Lin_16.o(.text._GetDevFunc) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[f7]">_GetDevProp</a> from GUIDRV_Lin_16.o(.text._GetDevProp) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[117]">_GetIndexMask_0</a> from GUICC_0.o(.text._GetIndexMask_0) referenced from GUICC_0.o(.rodata)
 <LI><a href="#[100]">_GetIndexMask_16</a> from GUICC_16.o(.text._GetIndexMask_16) referenced from GUICC_16.o(.rodata)
 <LI><a href="#[a8]">_GetIndexMask_1616I</a> from GUICC_1616I.o(.text._GetIndexMask_1616I) referenced from GUICC_1616I.o(.rodata)
 <LI><a href="#[cd]">_GetIndexMask_565</a> from GUICC_565.o(.text._GetIndexMask_565) referenced from GUICC_565.o(.rodata)
 <LI><a href="#[ad]">_GetIndexMask_822216</a> from GUICC_822216.o(.text._GetIndexMask_822216) referenced from GUICC_822216.o(.rodata)
 <LI><a href="#[b0]">_GetIndexMask_84444</a> from GUICC_84444.o(.text._GetIndexMask_84444) referenced from GUICC_84444.o(.rodata)
 <LI><a href="#[b3]">_GetIndexMask_8666</a> from GUICC_8666.o(.text._GetIndexMask_8666) referenced from GUICC_8666.o(.rodata)
 <LI><a href="#[b6]">_GetIndexMask_8666_1</a> from GUICC_8666_1.o(.text._GetIndexMask_8666_1) referenced from GUICC_8666_1.o(.rodata)
 <LI><a href="#[b9]">_GetIndexMask_88666I</a> from GUICC_88666I.o(.text._GetIndexMask_88666I) referenced from GUICC_88666I.o(.rodata)
 <LI><a href="#[d2]">_GetIndexMask_888</a> from GUICC_888.o(.text._GetIndexMask_888) referenced from GUICC_888.o(.rodata)
 <LI><a href="#[d7]">_GetIndexMask_8888</a> from GUICC_8888.o(.text._GetIndexMask_8888) referenced from GUICC_8888.o(.rodata)
 <LI><a href="#[be]">_GetIndexMask_M1555I</a> from GUICC_M1555I.o(.text._GetIndexMask_M1555I) referenced from GUICC_M1555I.o(.rodata)
 <LI><a href="#[c3]">_GetIndexMask_M4444I</a> from GUICC_M4444I.o(.text._GetIndexMask_M4444I) referenced from GUICC_M4444I.o(.rodata)
 <LI><a href="#[dc]">_GetIndexMask_M565</a> from GUICC_M565.o(.text._GetIndexMask_M565) referenced from GUICC_M565.o(.rodata)
 <LI><a href="#[e1]">_GetIndexMask_M888</a> from GUICC_M888.o(.text._GetIndexMask_M888) referenced from GUICC_M888.o(.rodata)
 <LI><a href="#[e6]">_GetIndexMask_M8888</a> from GUICC_M8888.o(.text._GetIndexMask_M8888) referenced from GUICC_M8888.o(.rodata)
 <LI><a href="#[c8]">_GetIndexMask_M8888I</a> from GUICC_M8888I.o(.text._GetIndexMask_M8888I) referenced from GUICC_M8888I.o(.rodata)
 <LI><a href="#[f2]">_GetPixelIndex</a> from GUIDRV_Lin_16.o(.text._GetPixelIndex) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[7d]">_GetPos</a> from GUIDRV_Lin_16.o(.text._GetPos) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[f9]">_GetRect</a> from GUIDRV_Lin_16.o(.text._GetRect) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[cf]">_Index2ColorBulk</a> from GUICC_565.o(.text._Index2ColorBulk) referenced 6 times from GUICC_565.o(.rodata)
 <LI><a href="#[aa]">_Index2ColorBulk_1616I</a> from GUICC_1616I.o(.text._Index2ColorBulk_1616I) referenced from GUICC_1616I.o(.rodata)
 <LI><a href="#[bb]">_Index2ColorBulk_88666I</a> from GUICC_88666I.o(.text._Index2ColorBulk_88666I) referenced from GUICC_88666I.o(.rodata)
 <LI><a href="#[c0]">_Index2ColorBulk_M1555I</a> from GUICC_M1555I.o(.text._Index2ColorBulk_M1555I) referenced from GUICC_M1555I.o(.rodata)
 <LI><a href="#[95]">_Index2ColorBulk_M1555I_DMA2D</a> from stemwin_wrapper.o(i._Index2ColorBulk_M1555I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[c5]">_Index2ColorBulk_M4444I</a> from GUICC_M4444I.o(.text._Index2ColorBulk_M4444I) referenced from GUICC_M4444I.o(.rodata)
 <LI><a href="#[99]">_Index2ColorBulk_M4444I_DMA2D</a> from stemwin_wrapper.o(i._Index2ColorBulk_M4444I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[97]">_Index2ColorBulk_M565_DMA2D</a> from stemwin_wrapper.o(i._Index2ColorBulk_M565_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[ca]">_Index2ColorBulk_M8888I</a> from GUICC_M8888I.o(.text._Index2ColorBulk_M8888I) referenced from GUICC_M8888I.o(.rodata)
 <LI><a href="#[9d]">_Index2ColorBulk_M8888I_DMA2D</a> from stemwin_wrapper.o(i._Index2ColorBulk_M8888I_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[9b]">_Index2ColorBulk_M888_DMA2D</a> from stemwin_wrapper.o(i._Index2ColorBulk_M888_DMA2D) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[116]">_Index2Color_0</a> from GUICC_0.o(.text._Index2Color_0) referenced from GUICC_0.o(.rodata)
 <LI><a href="#[ff]">_Index2Color_16</a> from GUICC_16.o(.text._Index2Color_16) referenced from GUICC_16.o(.rodata)
 <LI><a href="#[a7]">_Index2Color_1616I</a> from GUICC_1616I.o(.text._Index2Color_1616I) referenced from GUICC_1616I.o(.rodata)
 <LI><a href="#[ac]">_Index2Color_822216</a> from GUICC_822216.o(.text._Index2Color_822216) referenced from GUICC_822216.o(.rodata)
 <LI><a href="#[af]">_Index2Color_84444</a> from GUICC_84444.o(.text._Index2Color_84444) referenced from GUICC_84444.o(.rodata)
 <LI><a href="#[b5]">_Index2Color_8666_1</a> from GUICC_8666_1.o(.text._Index2Color_8666_1) referenced from GUICC_8666_1.o(.rodata)
 <LI><a href="#[b8]">_Index2Color_88666I</a> from GUICC_88666I.o(.text._Index2Color_88666I) referenced from GUICC_88666I.o(.rodata)
 <LI><a href="#[bd]">_Index2Color_M1555I</a> from GUICC_M1555I.o(.text._Index2Color_M1555I) referenced from GUICC_M1555I.o(.rodata)
 <LI><a href="#[c2]">_Index2Color_M4444I</a> from GUICC_M4444I.o(.text._Index2Color_M4444I) referenced from GUICC_M4444I.o(.rodata)
 <LI><a href="#[e5]">_Index2Color_M8888</a> from GUICC_M8888.o(.text._Index2Color_M8888) referenced from GUICC_M8888.o(.rodata)
 <LI><a href="#[8a]">_Init</a> from GUIDRV_Lin_16.o(.text._Init) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[9f]">_LCD_DrawBitmapAlpha</a> from stemwin_wrapper.o(i._LCD_DrawBitmapAlpha) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[a0]">_LCD_DrawMemdevAlpha</a> from stemwin_wrapper.o(i._LCD_DrawMemdevAlpha) referenced from stemwin_wrapper.o(i.LCD_X_Config)
 <LI><a href="#[c]">_Log2VisBuffered</a> from GUI_CharLine.o(.text._Log2VisBuffered) referenced 2 times from GUI_CharLine.o(.data)
 <LI><a href="#[88]">_Off</a> from GUIDRV_Lin_16.o(.text._Off) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[89]">_On</a> from GUIDRV_Lin_16.o(.text._On) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[76]">_OnExit</a> from GUI_Task.o(.text._OnExit) referenced from GUI_Task.o(.text.GUITASK_Init)
 <LI><a href="#[77]">_OnExit</a> from GUI_Core.o(.text._OnExit) referenced from GUI_Core.o(.text.GUI__Config)
 <LI><a href="#[78]">_OnExit</a> from LCD_Color.o(.text._OnExit) referenced from LCD_Color.o(.text.LCD_InitColors)
 <LI><a href="#[79]">_OnExit</a> from WM.o(.text._OnExit) referenced from WM.o(.text.WM_Init)
 <LI><a href="#[80]">_ReadRect</a> from GUIDRV_Lin_16.o(.text._ReadRect) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[7f]">_SetAlpha</a> from GUIDRV_Lin_16.o(.text._SetAlpha) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[87]">_SetAlphaMode</a> from GUIDRV_Lin_16.o(.text._SetAlphaMode) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[ec]">_SetBkColor</a> from LCD.o(.text._SetBkColor) referenced from LCD.o(.rodata)
 <LI><a href="#[85]">_SetChroma</a> from GUIDRV_Lin_16.o(.text._SetChroma) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[86]">_SetChromaMode</a> from GUIDRV_Lin_16.o(.text._SetChromaMode) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[eb]">_SetColor</a> from LCD.o(.text._SetColor) referenced from LCD.o(.rodata)
 <LI><a href="#[84]">_SetDevFunc</a> from GUIDRV_Lin_16.o(.text._SetDevFunc) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[ed]">_SetDrawMode</a> from LCD.o(.text._SetDrawMode) referenced from LCD.o(.rodata)
 <LI><a href="#[f5]">_SetOrg</a> from GUIDRV_Lin_16.o(.text._SetOrg) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[f3]">_SetPixelIndex</a> from GUIDRV_Lin_16.o(.text._SetPixelIndex) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[7e]">_SetPos</a> from GUIDRV_Lin_16.o(.text._SetPos) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[8b]">_SetSize</a> from GUIDRV_Lin_16.o(.text._SetSize) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[7b]">_SetVRAMAddr</a> from GUIDRV_Lin_16.o(.text._SetVRAMAddr) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[81]">_SetVRAM_BufferPTR</a> from GUIDRV_Lin_16.o(.text._SetVRAM_BufferPTR) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[8c]">_SetVSize</a> from GUIDRV_Lin_16.o(.text._SetVSize) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[7c]">_SetVis</a> from GUIDRV_Lin_16.o(.text._SetVis) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[82]">_ShowBuffer</a> from GUIDRV_Lin_16.o(.text._ShowBuffer) referenced from GUIDRV_Lin_16.o(.text._GetDevFunc)
 <LI><a href="#[f4]">_XorPixel</a> from GUIDRV_Lin_16.o(.text._XorPixel) referenced 2 times from GUIDRV_Lin_16.o(.rodata)
 <LI><a href="#[75]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[7a]">_cbBackWin</a> from WM.o(.text._cbBackWin) referenced from WM.o(.text.WM_Init)
 <LI><a href="#[73]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[d]">memcpy</a> from memmove.o(.text) referenced 2 times from GUI__Private.o(.data)
 <LI><a href="#[e]">memset</a> from memseta.o(.text) referenced 2 times from GUI__Private.o(.data)
 <LI><a href="#[a2]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[a1]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[1]">stmpe811_Init</a> from stmpe811.o(i.stmpe811_Init) referenced 2 times from stmpe811.o(.data)
 <LI><a href="#[2]">stmpe811_ReadID</a> from stmpe811.o(i.stmpe811_ReadID) referenced 2 times from stmpe811.o(.data)
 <LI><a href="#[3]">stmpe811_Reset</a> from stmpe811.o(i.stmpe811_Reset) referenced 2 times from stmpe811.o(.data)
 <LI><a href="#[8]">stmpe811_TS_ClearIT</a> from stmpe811.o(i.stmpe811_TS_ClearIT) referenced 2 times from stmpe811.o(.data)
 <LI><a href="#[5]">stmpe811_TS_DetectTouch</a> from stmpe811.o(i.stmpe811_TS_DetectTouch) referenced 2 times from stmpe811.o(.data)
 <LI><a href="#[a]">stmpe811_TS_DisableIT</a> from stmpe811.o(i.stmpe811_TS_DisableIT) referenced 2 times from stmpe811.o(.data)
 <LI><a href="#[7]">stmpe811_TS_EnableIT</a> from stmpe811.o(i.stmpe811_TS_EnableIT) referenced 2 times from stmpe811.o(.data)
 <LI><a href="#[6]">stmpe811_TS_GetXY</a> from stmpe811.o(i.stmpe811_TS_GetXY) referenced 2 times from stmpe811.o(.data)
 <LI><a href="#[9]">stmpe811_TS_ITStatus</a> from stmpe811.o(i.stmpe811_TS_ITStatus) referenced 2 times from stmpe811.o(.data)
 <LI><a href="#[4]">stmpe811_TS_Start</a> from stmpe811.o(i.stmpe811_TS_Start) referenced 2 times from stmpe811.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[75]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[2cb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[118]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[125]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2cc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2cd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ce]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2cf]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[2d0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2d1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c4]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2c3]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2bc]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[2d2]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>___aeabi_memmove$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[d]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Private.o(.data)
</UL>
<P><STRONG><a name="[1c3]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2d6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2d8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Private.o(.data)
</UL>
<P><STRONG><a name="[120]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2d9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2da]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[121]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[119]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2dc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>GL_DrawLine1Ex</STRONG> (Thumb, 1030 bytes, Stack size unknown bytes, GUI_DrawLine.o(.text.GL_DrawLine1Ex))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>

<P><STRONG><a name="[127]"></a>GL_DrawPoint</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, GUI_DrawLib.o(.text.GL_DrawPoint))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[129]"></a>GL_FillCircle</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, GUI_Circ.o(.text.GL_FillCircle))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>

<P><STRONG><a name="[14f]"></a>GL_FillPolygon</STRONG> (Thumb, 1480 bytes, Stack size unknown bytes, GUI_FillPolygon.o(.text.GL_FillPolygon))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>

<P><STRONG><a name="[265]"></a>GUICC_M1555I_SetCustColorConv</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text.GUICC_M1555I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[267]"></a>GUICC_M4444I_SetCustColorConv</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text.GUICC_M4444I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[266]"></a>GUICC_M565_SetCustColorConv</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUICC_M565.o(.text.GUICC_M565_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[269]"></a>GUICC_M8888I_SetCustColorConv</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, GUICC_M8888I.o(.text.GUICC_M8888I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[268]"></a>GUICC_M888_SetCustColorConv</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, GUICC_M888.o(.text.GUICC_M888_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[105]"></a>GUIMONO_DispChar</STRONG> (Thumb, 328 bytes, Stack size unknown bytes, GUI_CharM.o(.text.GUIMONO_DispChar))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> F6x8.o(.rodata)
</UL>
<P><STRONG><a name="[106]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI_CharM.o(.text.GUIMONO_GetCharDistX))
<BR>[Address Reference Count : 1]<UL><LI> F6x8.o(.rodata)
</UL>
<P><STRONG><a name="[107]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUI_CharM.o(.text.GUIMONO_GetFontInfo))
<BR>[Address Reference Count : 1]<UL><LI> F6x8.o(.rodata)
</UL>
<P><STRONG><a name="[108]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, GUI_CharM.o(.text.GUIMONO_IsInFont))
<BR>[Address Reference Count : 1]<UL><LI> F6x8.o(.rodata)
</UL>
<P><STRONG><a name="[fa]"></a>GUIPROP_DispChar</STRONG> (Thumb, 260 bytes, Stack size unknown bytes, GUI_CharP.o(.text.GUIPROP_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUIPROP_DispChar &rArr; GUI_SetColor &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Address Reference Count : 4]<UL><LI> F32B_1.o(.rodata)
<LI> F20B_1.o(.rodata)
<LI> F32B_ASCII.o(.rodata)
<LI> F20B_ASCII.o(.rodata)
</UL>
<P><STRONG><a name="[fb]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, GUI_CharP.o(.text.GUIPROP_GetCharDistX))
<BR>[Address Reference Count : 4]<UL><LI> F32B_1.o(.rodata)
<LI> F20B_1.o(.rodata)
<LI> F32B_ASCII.o(.rodata)
<LI> F20B_ASCII.o(.rodata)
</UL>
<P><STRONG><a name="[fc]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUI_CharP.o(.text.GUIPROP_GetFontInfo))
<BR>[Address Reference Count : 4]<UL><LI> F32B_1.o(.rodata)
<LI> F20B_1.o(.rodata)
<LI> F32B_ASCII.o(.rodata)
<LI> F20B_ASCII.o(.rodata)
</UL>
<P><STRONG><a name="[fd]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUI_CharP.o(.text.GUIPROP_IsInFont))
<BR>[Address Reference Count : 4]<UL><LI> F32B_1.o(.rodata)
<LI> F20B_1.o(.rodata)
<LI> F32B_ASCII.o(.rodata)
<LI> F20B_ASCII.o(.rodata)
</UL>
<P><STRONG><a name="[130]"></a>GUITASK_CopyContext</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, GUI_Task.o(.text.GUITASK_CopyContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUITASK_CopyContext &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[132]"></a>GUITASK_Init</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, GUI_Task.o(.text.GUITASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GUITASK_Init &rArr; GUI_X_InitOS &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[136]"></a>GUI_ALLOC_AllocNoInit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_AllocNoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocNoInit &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[13a]"></a>GUI_ALLOC_AllocZero</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_AllocZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocZero &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[1ea]"></a>GUI_ALLOC_AssignMemory</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_AssignMemory))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[13b]"></a>GUI_ALLOC_Free</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_Free &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[145]"></a>GUI_ALLOC_FreeFixedBlock</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_FreeFixedBlock))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
</UL>

<P><STRONG><a name="[134]"></a>GUI_ALLOC_GetFixedBlock</STRONG> (Thumb, 560 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_GetFixedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_GetFixedBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAM_BufferPTR
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
</UL>

<P><STRONG><a name="[16c]"></a>GUI_ALLOC_LockH</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_LockH))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[16d]"></a>GUI_ALLOC_UnlockH</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_UnlockH))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[1a3]"></a>GUI_ALLOC_h2p</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_Alloc.o(.text.GUI_ALLOC_h2p))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[1bb]"></a>GUI_CalcColorDist</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_CalcColorDist))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[13f]"></a>GUI_Clear</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, GUI_Core.o(.text.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_Clear &rArr; GUI_GotoXY &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[143]"></a>GUI_DEVICE_CreateAndLink</STRONG> (Thumb, 304 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE_CreateAndLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[144]"></a>GUI_DEVICE_Delete</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[16a]"></a>GUI_DEVICE_LinkDevices</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE_LinkDevices))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[198]"></a>GUI_DEVICE_Unlink</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE_Unlink))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>

<P><STRONG><a name="[169]"></a>GUI_DEVICE_UnlinkTaskDevices</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE_UnlinkTaskDevices))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[17c]"></a>GUI_DEVICE__GetpDriver</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUI_Device.o(.text.GUI_DEVICE__GetpDriver))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
</UL>

<P><STRONG><a name="[14d]"></a>GUI_DispStringAt</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI_DispString.o(.text.GUI_DispStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringAt &rArr; GUI_DispString.part.0 &rArr; GUI_GetFontDistY &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[14e]"></a>GUI_DrawLine</STRONG> (Thumb, 752 bytes, Stack size unknown bytes, GUI_DrawLine.o(.text.GUI_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_DrawLine &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_map
</UL>

<P><STRONG><a name="[150]"></a>GUI_FillCircle</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, GUI_Circ.o(.text.GUI_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_FillCircle &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_ifNotCollided
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_map
</UL>

<P><STRONG><a name="[151]"></a>GUI_FillRect</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, GUI_DrawLib.o(.text.GUI_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_FillRect &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_map
</UL>

<P><STRONG><a name="[173]"></a>GUI_GetBitsPerPixelEx</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.GUI_GetBitsPerPixelEx))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[12e]"></a>GUI_GetBkColor</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_GetBkColor &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[154]"></a>GUI_GetCharDistX</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, GUI_Char.o(.text.GUI_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistX &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[155]"></a>GUI_GetCharDistXEx</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI_Char.o(.text.GUI_GetCharDistXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistXEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[12d]"></a>GUI_GetColor</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_GetColor &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[157]"></a>GUI_GetDrawMode</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_GetDrawMode &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
</UL>

<P><STRONG><a name="[147]"></a>GUI_GetFontDistY</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUI_Char.o(.text.GUI_GetFontDistY))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_GetFontDistY &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[158]"></a>GUI_GetLayerPosEx</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI_SelectLayer.o(.text.GUI_GetLayerPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[15a]"></a>GUI_GetPixelIndex</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, LCD_GetP.o(.text.GUI_GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_GetPixelIndex &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
</UL>

<P><STRONG><a name="[184]"></a>GUI_GetVersionString</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GetVersionString))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[148]"></a>GUI_GetYAdjust</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, GUI_Char.o(.text.GUI_GetYAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_GetYAdjust &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[175]"></a>GUI_GetpfColor2IndexEx</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.GUI_GetpfColor2IndexEx))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[174]"></a>GUI_GetpfIndex2ColorEx</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.GUI_GetpfIndex2ColorEx))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[140]"></a>GUI_GotoXY</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_GotoXY &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[15b]"></a>GUI_Index2Color</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_Index2Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_Index2Color &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
</UL>

<P><STRONG><a name="[15c]"></a>GUI_Init</STRONG> (Thumb, 252 bytes, Stack size unknown bytes, GUI_Core.o(.text.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GUI_Init &rArr; GUI__Config &rArr; GUITASK_Init &rArr; GUI_X_InitOS &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplaySize
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeDisplay
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeDisplay
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_Init
</UL>

<P><STRONG><a name="[137]"></a>GUI_Lock</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, GUI_Task.o(.text.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GUI_Lock &rArr; GUI_X_Lock &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_UnlinkTaskDevices
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Index2Color
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPixelIndex
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetDrawMode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>

<P><STRONG><a name="[16b]"></a>GUI_MEMDEV_Delete</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, GUIDEV.o(.text.GUI_MEMDEV_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Delete &rArr; GUI_SelectLCD &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>

<P><STRONG><a name="[170]"></a>GUI_MEMDEV_GetBitsPerPixel</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, GUIDEV.o(.text.GUI_MEMDEV_GetBitsPerPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetBitsPerPixel &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[172]"></a>GUI_MEMDEV_GetDataPtr</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, GUIDEV_GetDataPtr.o(.text.GUI_MEMDEV_GetDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetDataPtr &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[8d]"></a>GUI_MEMDEV__WriteToActiveOpaque</STRONG> (Thumb, 2428 bytes, Stack size unknown bytes, GUIDEV_WriteToActiveOpaque.o(.text.GUI_MEMDEV__WriteToActiveOpaque))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveOpaque &rArr; GUI_ALLOC_Free &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[220]"></a>GUI_MULTIBUF_ConfirmEx</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUI_MULTIBUF.o(.text.GUI_MULTIBUF_ConfirmEx))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[1c2]"></a>GUI_MergeRect</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_MergeRect))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[1af]"></a>GUI_MoveRect</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_MoveRect))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>

<P><STRONG><a name="[1b8]"></a>GUI_RectsIntersect</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_RectsIntersect))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[16f]"></a>GUI_SelectLCD</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_SelectLCD &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[17b]"></a>GUI_SelectLayer</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUI_SelectLayer.o(.text.GUI_SelectLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[17d]"></a>GUI_SetBkColor</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_SetBkColor &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[12f]"></a>GUI_SetColor</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_SetColor &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_ifNotCollided
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_map
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[180]"></a>GUI_SetFont</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_SetFont &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[26a]"></a>GUI_SetFuncDrawAlpha</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI__Alpha.o(.text.GUI_SetFuncDrawAlpha))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[166]"></a>GUI_SetOrg</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUI_Common.o(.text.GUI_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_SetOrg &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[182]"></a>GUI_SignalEvent</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUI_WaitEvent.o(.text.GUI_SignalEvent))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[181]"></a>GUI_StoreKey</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUI_OnKey.o(.text.GUI_StoreKey))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[188]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI_UC.o(.text.GUI_UC__GetCharCodeInc))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[14c]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI_UC.o(.text.GUI_UC__NumChars2NumBytes))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[1bc]"></a>GUI_USAGE_AddRect</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, GUIDEV_Usage.o(.text.GUI_USAGE_AddRect))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[16e]"></a>GUI_USAGE_DecUseCnt</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUIDEV_Usage.o(.text.GUI_USAGE_DecUseCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[139]"></a>GUI_Unlock</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_Task.o(.text.GUI_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Index2Color
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPixelIndex
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetDrawMode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>

<P><STRONG><a name="[176]"></a>GUI__CompactPixelIndices</STRONG> (Thumb, 400 bytes, Stack size unknown bytes, GUI__CompactPixelIndices.o(.text.GUI__CompactPixelIndices))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[15d]"></a>GUI__Config</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, GUI_Core.o(.text.GUI__Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GUI__Config &rArr; GUITASK_Init &rArr; GUI_X_InitOS &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetVersionString
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[14b]"></a>GUI__DispLine</STRONG> (Thumb, 180 bytes, Stack size unknown bytes, GUI_CharLine.o(.text.GUI__DispLine))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[14a]"></a>GUI__GetLineDistX</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, GUI_CharLine.o(.text.GUI__GetLineDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI__GetLineDistX &rArr; GUI_GetCharDistXEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[149]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, GUI_CharLine.o(.text.GUI__GetLineNumChars))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString.part.0
</UL>

<P><STRONG><a name="[1b0]"></a>GUI__IntersectRect</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__IntersectRect))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>

<P><STRONG><a name="[19a]"></a>GUI__IntersectRects</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__IntersectRects))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[189]"></a>GUI__ManageCache</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, GUI__ManageCache.o(.text.GUI__ManageCache))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[133]"></a>GUI__RegisterExit</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUI_Core.o(.text.GUI__RegisterExit))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
</UL>

<P><STRONG><a name="[18a]"></a>GUI__memset</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI__memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAM_BufferPTR
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
</UL>

<P><STRONG><a name="[1bd]"></a>GUI__memset16</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, GUI__Private.o(.text.GUI__memset16))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[193]"></a>LCD_Color2Index</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, LCD.o(.text.LCD_Color2Index))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableBM
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[b1]"></a>LCD_Color2Index_8666</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, GUICC_8666.o(.text.LCD_Color2Index_8666))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666.o(.rodata)
</UL>
<P><STRONG><a name="[12b]"></a>LCD_DrawBitmap</STRONG> (Thumb, 780 bytes, Stack size unknown bytes, LCD.o(.text.LCD_DrawBitmap))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[e9]"></a>LCD_DrawHLine</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, LCD.o(.text.LCD_DrawHLine))
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.rodata)
</UL>
<P><STRONG><a name="[ea]"></a>LCD_DrawPixel</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, LCD.o(.text.LCD_DrawPixel))
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.rodata)
</UL>
<P><STRONG><a name="[128]"></a>LCD_DrawVLine</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, LCD.o(.text.LCD_DrawVLine))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[12c]"></a>LCD_FillRect</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, LCD.o(.text.LCD_FillRect))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[18b]"></a>LCD_GetBitsPerPixelEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetBitsPerPixelEx))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[152]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, LCD_GetColorIndex.o(.text.LCD_GetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[156]"></a>LCD_GetColorIndex</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, LCD_GetColorIndex.o(.text.LCD_GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>

<P><STRONG><a name="[18c]"></a>LCD_GetMirrorXEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetMirrorXEx))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[18d]"></a>LCD_GetMirrorYEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetMirrorYEx))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[18e]"></a>LCD_GetNumColors</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetNumColors))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetIndexMask_0
</UL>

<P><STRONG><a name="[18f]"></a>LCD_GetNumColorsEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetNumColorsEx))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[190]"></a>LCD_GetNumLayers</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, LCD_GetNumDisplays.o(.text.LCD_GetNumLayers))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[191]"></a>LCD_GetPalette</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetPalette))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
</UL>

<P><STRONG><a name="[159]"></a>LCD_GetPosEx</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_GetPosEx))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
</UL>

<P><STRONG><a name="[192]"></a>LCD_GetSwapXYEx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetSwapXYEx))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
</UL>

<P><STRONG><a name="[161]"></a>LCD_GetXSizeDisplay</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetXSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
</UL>

<P><STRONG><a name="[163]"></a>LCD_GetXSizeMax</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetXSizeMax))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[162]"></a>LCD_GetYSizeDisplay</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetYSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
</UL>

<P><STRONG><a name="[164]"></a>LCD_GetYSizeMax</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_GetYSizeMax))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[b]"></a>LCD_GetpPalConvTableBM</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, LCD_Color.o(.text.LCD_GetpPalConvTableBM))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.data)
</UL>
<P><STRONG><a name="[153]"></a>LCD_Index2Color</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, LCD.o(.text.LCD_Index2Color))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Index2Color
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[cc]"></a>LCD_Index2Color_565</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, GUICC_565.o(.text.LCD_Index2Color_565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_565.o(.rodata)
</UL>
<P><STRONG><a name="[b2]"></a>LCD_Index2Color_8666</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, GUICC_8666.o(.text.LCD_Index2Color_8666))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666.o(.rodata)
</UL>
<P><STRONG><a name="[d1]"></a>LCD_Index2Color_888</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUICC_888_Index2Color.o(.text.LCD_Index2Color_888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_888.o(.rodata)
</UL>
<P><STRONG><a name="[d6]"></a>LCD_Index2Color_8888</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUICC_8888_Index2Color.o(.text.LCD_Index2Color_8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.rodata)
</UL>
<P><STRONG><a name="[db]"></a>LCD_Index2Color_M565</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUICC_M565.o(.text.LCD_Index2Color_M565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.rodata)
</UL>
<P><STRONG><a name="[e0]"></a>LCD_Index2Color_M888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M888_Index2Color.o(.text.LCD_Index2Color_M888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M888.o(.rodata)
</UL>
<P><STRONG><a name="[c7]"></a>LCD_Index2Color_M8888I</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, GUICC_M8888I_Index2Color.o(.text.LCD_Index2Color_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888I.o(.rodata)
</UL>
<P><STRONG><a name="[194]"></a>LCD_InitColors</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, LCD_Color.o(.text.LCD_InitColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[195]"></a>LCD_InitLUT</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, LCD_Color.o(.text.LCD_InitLUT))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[178]"></a>LCD_SelectLCD</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, LCD_SelectLCD.o(.text.LCD_SelectLCD))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[17e]"></a>LCD_SetBkColor</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[1a0]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[199]"></a>LCD_SetClipRectEx</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, LCD_SetClipRectEx.o(.text.LCD_SetClipRectEx))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[197]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetClipRectMax))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[17f]"></a>LCD_SetColor</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetColor))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[19f]"></a>LCD_SetColorIndex</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[19b]"></a>LCD_SetDevFunc</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetDevFunc))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[165]"></a>LCD_SetDisplaySize</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD_SetDisplaySize))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[12a]"></a>LCD_SetDrawMode</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, LCD.o(.text.LCD_SetDrawMode))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[196]"></a>LCD_SetLUTEntryEx</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetLUTEntryEx))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[19c]"></a>LCD_SetSizeEx</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetSizeEx))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[19d]"></a>LCD_SetVRAMAddrEx</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetVRAMAddrEx))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[19e]"></a>LCD_SetVSizeEx</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, LCD_Set.o(.text.LCD_SetVSizeEx))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[179]"></a>LCD_UpdateColorIndices</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, LCD_UpdateColorIndices.o(.text.LCD_UpdateColorIndices))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[177]"></a>LCD__DrawBitmap_1bpp</STRONG> (Thumb, 540 bytes, Stack size unknown bytes, LCD.o(.text.LCD__DrawBitmap_1bpp))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[171]"></a>LCD__GetBPPDevice</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, LCD_GetEx.o(.text.LCD__GetBPPDevice))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>

<P><STRONG><a name="[17a]"></a>WM_Activate</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, WM.o(.text.WM_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[1a1]"></a>WM_BringToBottom</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_BringToBottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WM_BringToBottom &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[1a5]"></a>WM_CreateWindowAsChild</STRONG> (Thumb, 476 bytes, Stack size unknown bytes, WM.o(.text.WM_CreateWindowAsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WM_CreateWindowAsChild &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[1a9]"></a>WM_DefaultProc</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, WM.o(.text.WM_DefaultProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WM_DefaultProc &rArr; WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>

<P><STRONG><a name="[1c1]"></a>WM_GetDesktopWindow</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetDesktopWindow))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[1ac]"></a>WM_GetFirstChild</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetFirstChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WM_GetFirstChild &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>

<P><STRONG><a name="[1ad]"></a>WM_GetParent</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_GetParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WM_GetParent &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>

<P><STRONG><a name="[167]"></a>WM_Init</STRONG> (Thumb, 348 bytes, Stack size unknown bytes, WM.o(.text.WM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WM_Init &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1b4]"></a>WM_InvalidateWindowAndDescsEx</STRONG> (Thumb, 868 bytes, Stack size unknown bytes, WM.o(.text.WM_InvalidateWindowAndDescsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescsEx &rArr;  WM_InvalidateWindowAndDescsEx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[1ab]"></a>WM_SendToParent</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, WM_Lib.o(.text.WM_SendToParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[1b5]"></a>WM__ActivateClipRect</STRONG> (Thumb, 296 bytes, Stack size unknown bytes, WM.o(.text.WM__ActivateClipRect))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>

<P><STRONG><a name="[1ae]"></a>WM__AddCriticalHandle</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__AddCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[1aa]"></a>WM__GetClientRectEx</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__GetClientRectEx))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[1b6]"></a>WM__GetClientRectWin</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, WM.o(.text.WM__GetClientRectWin))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
</UL>

<P><STRONG><a name="[142]"></a>WM__GetNextIVR</STRONG> (Thumb, 588 bytes, Stack size unknown bytes, WM.o(.text.WM__GetNextIVR))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>

<P><STRONG><a name="[1a2]"></a>WM__GetPrevSibling</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__GetPrevSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WM__GetPrevSibling &rArr; WM_GetParent &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[141]"></a>WM__InitIVRSearch</STRONG> (Thumb, 408 bytes, Stack size unknown bytes, WM.o(.text.WM__InitIVRSearch))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[1a6]"></a>WM__InsertWindowIntoList</STRONG> (Thumb, 218 bytes, Stack size unknown bytes, WM.o(.text.WM__InsertWindowIntoList))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[1b2]"></a>WM__InvalidateDrawAndDescs</STRONG> (Thumb, 676 bytes, Stack size unknown bytes, WM.o(.text.WM__InvalidateDrawAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__InvalidateDrawAndDescs &rArr;  WM__InvalidateDrawAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>

<P><STRONG><a name="[1b3]"></a>WM__InvalidateRect</STRONG> (Thumb, 206 bytes, Stack size unknown bytes, WM.o(.text.WM__InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>

<P><STRONG><a name="[1a4]"></a>WM__InvalidateRectEx</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, WM.o(.text.WM__InvalidateRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[1a7]"></a>WM__SendMessage</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, WM__Private.o(.text.WM__SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
</UL>

<P><STRONG><a name="[160]"></a>emWin_LCD_Init</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, LCD.o(.text.emWin_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = emWin_LCD_Init &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1c4]"></a>BSP_LED_Init</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, stm32f429i_discovery.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c7]"></a>BSP_LED_Toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f429i_discovery.o(i.BSP_LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LED_Toggle &rArr; HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[1c9]"></a>BSP_SDRAM_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f429i_discovery_sdram.o(i.BSP_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SDRAM_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cc]"></a>BSP_SDRAM_Initialization_sequence</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, stm32f429i_discovery_sdram.o(i.BSP_SDRAM_Initialization_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_SDRAM_Initialization_sequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[1ca]"></a>BSP_SDRAM_MspInit</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, stm32f429i_discovery_sdram.o(i.BSP_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[283]"></a>BSP_TS_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f429i_discovery_ts.o(i.BSP_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_IRQHandler &rArr; HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d9]"></a>DMA2D_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stemwin_wrapper.o(i.DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA2D_Init &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
</UL>

<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1db]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Init
</UL>

<P><STRONG><a name="[1de]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1e0]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[1e1]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[1e3]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1e4]"></a>GRAPHICS_HW_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stemwin_wrapper.o(i.GRAPHICS_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GRAPHICS_HW_Init &rArr; MX_LCD_Init &rArr; ili9341_Init &rArr; LCD_IO_Init &rArr; SPIx_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9]"></a>GRAPHICS_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stemwin_wrapper.o(i.GRAPHICS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GRAPHICS_Init &rArr; GUI_Init &rArr; GUI__Config &rArr; GUITASK_Init &rArr; GUI_X_InitOS &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>GUI_X_Config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guiconf.o(i.GUI_X_Config))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[131]"></a>GUI_X_GetTaskId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_os.o(i.GUI_X_GetTaskId))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[15e]"></a>GUI_X_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_os.o(i.GUI_X_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[135]"></a>GUI_X_InitOS</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gui_x_os.o(i.GUI_X_InitOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_X_InitOS &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[168]"></a>GUI_X_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_x_os.o(i.GUI_X_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_X_Lock &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[183]"></a>GUI_X_Unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_x_os.o(i.GUI_X_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_CRC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crc.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Init
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_Init
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hw_init.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_DMA_Init</STRONG> (Thumb, 662 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Delay
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_GPIO_Init</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ITConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[256]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_I2C_Init</STRONG> (Thumb, 540 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[202]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ReadMultiple
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
</UL>

<P><STRONG><a name="[206]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[200]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[24e]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[20a]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[211]"></a>HAL_LTDC_ConfigCLUT</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ConfigCLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_LTDC_ConfigCLUT
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[212]"></a>HAL_LTDC_ConfigColorKeying</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ConfigColorKeying))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_ConfigColorKeying
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[213]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
</UL>

<P><STRONG><a name="[216]"></a>HAL_LTDC_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_LTDC_DeInit &rArr; HAL_LTDC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
</UL>

<P><STRONG><a name="[218]"></a>HAL_LTDC_DisableColorKeying</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_DisableColorKeying))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_DisableColorKeying
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[219]"></a>HAL_LTDC_EnableColorKeying</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_EnableColorKeying))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_EnableColorKeying
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[21b]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[21a]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[21e]"></a>HAL_LTDC_Init</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
</UL>

<P><STRONG><a name="[21c]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stemwin_wrapper.o(i.HAL_LTDC_LineEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_ConfirmEx
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[217]"></a>HAL_LTDC_MspDeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hw_init.o(i.HAL_LTDC_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_LTDC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
</UL>

<P><STRONG><a name="[21f]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, hw_init.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[221]"></a>HAL_LTDC_ProgramLineEvent</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ProgramLineEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[21d]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[223]"></a>HAL_LTDC_SetAddress</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_SetAddress &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[224]"></a>HAL_LTDC_SetAlpha</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[225]"></a>HAL_LTDC_SetWindowPosition</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_SetWindowPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[20d]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[222]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ITConfig
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ITConfig
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[20b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[227]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[228]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 964 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[229]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 542 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[20e]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[201]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[27d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[22a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[22b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1066 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[22c]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_init.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate &rArr; FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[22d]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SPI_DeInit &rArr; HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>

<P><STRONG><a name="[277]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>

<P><STRONG><a name="[22f]"></a>HAL_SPI_Init</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[22e]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[230]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[231]"></a>HAL_SPI_Receive</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[234]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[232]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[243]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[245]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[236]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[20f]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[237]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[210]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[239]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 914 bytes, Stack size 40 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[23f]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[23e]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[246]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
</UL>

<P><STRONG><a name="[240]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[247]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
</UL>

<P><STRONG><a name="[24c]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
</UL>

<P><STRONG><a name="[24d]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[241]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[242]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[244]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[24f]"></a>HAL_UART_Init</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[250]"></a>HAL_UART_MspInit</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[258]"></a>IOE_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f429i_discovery.o(i.IOE_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IOE_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_Start
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_Reset
</UL>

<P><STRONG><a name="[259]"></a>IOE_ITConfig</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, stm32f429i_discovery.o(i.IOE_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IOE_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_EnableIT
</UL>

<P><STRONG><a name="[25a]"></a>IOE_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f429i_discovery.o(i.IOE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = IOE_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_ReadID
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_Init
</UL>

<P><STRONG><a name="[25b]"></a>IOE_Read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stm32f429i_discovery.o(i.IOE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_Start
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_ITStatus
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_DetectTouch
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_ReadID
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_IO_EnableAF
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_EnableITSource
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_EnableGlobalIT
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_DisableITSource
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_DisableGlobalIT
</UL>

<P><STRONG><a name="[25c]"></a>IOE_ReadMultiple</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stm32f429i_discovery.o(i.IOE_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IOE_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_GetXY
</UL>

<P><STRONG><a name="[25d]"></a>IOE_Write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f429i_discovery.o(i.IOE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IOE_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_Start
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_GetXY
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_DetectTouch
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_Reset
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_IO_EnableAF
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_EnableITSource
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_EnableGlobalIT
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_DisableITSource
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_DisableGlobalIT
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_ClearGlobalIT
</UL>

<P><STRONG><a name="[25e]"></a>LCD_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f429i_discovery.o(i.LCD_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9341_Init
</UL>

<P><STRONG><a name="[25f]"></a>LCD_IO_Init</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, stm32f429i_discovery.o(i.LCD_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_IO_Init &rArr; SPIx_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9341_Init
</UL>

<P><STRONG><a name="[261]"></a>LCD_IO_WriteData</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f429i_discovery.o(i.LCD_IO_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_IO_WriteData &rArr; SPIx_Write &rArr; SPIx_Error &rArr; SPIx_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9341_Init
</UL>

<P><STRONG><a name="[263]"></a>LCD_IO_WriteReg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f429i_discovery.o(i.LCD_IO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_IO_WriteReg &rArr; SPIx_Write &rArr; SPIx_Error &rArr; SPIx_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9341_Init
</UL>

<P><STRONG><a name="[93]"></a>LCD_LL_DrawBitmap16bpp</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, stemwin_wrapper.o(i.LCD_LL_DrawBitmap16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_LL_DrawBitmap16bpp &rArr; DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[186]"></a>LCD_X_Config</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, stemwin_wrapper.o(i.LCD_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFuncDrawAlpha
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M888_SetCustColorConv
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M8888I_SetCustColorConv
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M565_SetCustColorConv
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M4444I_SetCustColorConv
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M1555I_SetCustColorConv
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[1c0]"></a>LCD_X_DisplayDriver</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, stemwin_wrapper.o(i.LCD_X_DisplayDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_EnableColorKeying
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DisableColorKeying
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigColorKeying
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigCLUT
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_On
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Off
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlphaMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChromaMode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChroma
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
</UL>

<P><STRONG><a name="[70]"></a>LTDC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26b]"></a>MX_CRC_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crc.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>MX_DMA2D_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hw_init.o(i.MX_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_DMA2D_Init &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
</UL>

<P><STRONG><a name="[1e5]"></a>MX_FMC_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hw_init.o(i.MX_FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_FMC_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
</UL>

<P><STRONG><a name="[26c]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26f]"></a>MX_GPIO_Init</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[270]"></a>MX_I2C3_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>MX_LCD_Init</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, hw_init.o(i.MX_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MX_LCD_Init &rArr; ili9341_Init &rArr; LCD_IO_Init &rArr; SPIx_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9341_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
</UL>

<P><STRONG><a name="[1e6]"></a>MX_SDRAM_InitEx</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, hw_init.o(i.MX_SDRAM_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SDRAM_InitEx &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
</UL>

<P><STRONG><a name="[272]"></a>MX_TIM1_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[273]"></a>MX_TIM9_Init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, tim.o(i.MX_TIM9_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_TIM9_Init &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[274]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>StartDefaultTask</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = StartDefaultTask &rArr; redraw_ifNotCollided &rArr; check_collision &rArr; GUI_Index2Color &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_ifNotCollided
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>StartTask02</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.StartTask02))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StartTask02 &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>StartTask03</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, freertos.o(i.StartTask03))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = StartTask03 &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27c]"></a>SystemClock_Config</STRONG> (Thumb, 154 bytes, Stack size 136 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[238]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[23a]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[249]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2df]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2e0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2e1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1df]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_EnableColorKeying
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DisableColorKeying
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigColorKeying
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigCLUT
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[282]"></a>check_collision</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, freertos.o(i.check_collision))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = check_collision &rArr; GUI_Index2Color &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Index2Color
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw_ifNotCollided
</UL>

<P><STRONG><a name="[278]"></a>draw_map</STRONG> (Thumb, 1004 bytes, Stack size 16 bytes, gyroscope_utilities.o(i.draw_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = draw_map &rArr; GUI_SetColor &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[271]"></a>ili9341_Init</STRONG> (Thumb, 658 bytes, Stack size 8 bytes, ili9341.o(i.ili9341_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ili9341_Init &rArr; LCD_IO_Init &rArr; SPIx_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LCD_Init
</UL>

<P><STRONG><a name="[73]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAPHICS_HW_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[279]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[284]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ec]"></a>osMutexCreate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[1ef]"></a>osMutexRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>

<P><STRONG><a name="[1ee]"></a>osMutexWait</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
</UL>

<P><STRONG><a name="[1ed]"></a>osSemaphoreCreate</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[26e]"></a>osThreadCreate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[1eb]"></a>osThreadGetId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmsis_os.o(i.osThreadGetId))
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>

<P><STRONG><a name="[2ae]"></a>pvPortMalloc</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2c8]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2a9]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[27a]"></a>redraw_ifNotCollided</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, freertos.o(i.redraw_ifNotCollided))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = redraw_ifNotCollided &rArr; check_collision &rArr; GUI_Index2Color &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[2b4]"></a>stmpe811_ClearGlobalIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stmpe811.o(i.stmpe811_ClearGlobalIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = stmpe811_ClearGlobalIT &rArr; IOE_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_ClearIT
</UL>

<P><STRONG><a name="[2b5]"></a>stmpe811_DisableGlobalIT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stmpe811.o(i.stmpe811_DisableGlobalIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = stmpe811_DisableGlobalIT &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_DisableIT
</UL>

<P><STRONG><a name="[2b6]"></a>stmpe811_DisableITSource</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stmpe811.o(i.stmpe811_DisableITSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = stmpe811_DisableITSource &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_DisableIT
</UL>

<P><STRONG><a name="[2b7]"></a>stmpe811_EnableGlobalIT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stmpe811.o(i.stmpe811_EnableGlobalIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = stmpe811_EnableGlobalIT &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_EnableIT
</UL>

<P><STRONG><a name="[2b8]"></a>stmpe811_EnableITSource</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stmpe811.o(i.stmpe811_EnableITSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = stmpe811_EnableITSource &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_EnableIT
</UL>

<P><STRONG><a name="[2b9]"></a>stmpe811_IO_EnableAF</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stmpe811.o(i.stmpe811_IO_EnableAF))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = stmpe811_IO_EnableAF &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_TS_Start
</UL>

<P><STRONG><a name="[1]"></a>stmpe811_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stmpe811.o(i.stmpe811_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = stmpe811_Init &rArr; stmpe811_Reset &rArr; IOE_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_Reset
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_GetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stmpe811.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>stmpe811_ReadID</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stmpe811.o(i.stmpe811_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = stmpe811_ReadID &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stmpe811.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>stmpe811_Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stmpe811.o(i.stmpe811_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = stmpe811_Reset &rArr; IOE_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stmpe811.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>stmpe811_TS_ClearIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stmpe811.o(i.stmpe811_TS_ClearIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = stmpe811_TS_ClearIT &rArr; stmpe811_ClearGlobalIT &rArr; IOE_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_ClearGlobalIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stmpe811.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>stmpe811_TS_DetectTouch</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stmpe811.o(i.stmpe811_TS_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = stmpe811_TS_DetectTouch &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stmpe811.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>stmpe811_TS_DisableIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stmpe811.o(i.stmpe811_TS_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = stmpe811_TS_DisableIT &rArr; stmpe811_DisableITSource &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_DisableITSource
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_DisableGlobalIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stmpe811.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>stmpe811_TS_EnableIT</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stmpe811.o(i.stmpe811_TS_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = stmpe811_TS_EnableIT &rArr; stmpe811_EnableITSource &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ITConfig
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_EnableITSource
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_EnableGlobalIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stmpe811.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>stmpe811_TS_GetXY</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, stmpe811.o(i.stmpe811_TS_GetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = stmpe811_TS_GetXY &rArr; IOE_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ReadMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stmpe811.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>stmpe811_TS_ITStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stmpe811.o(i.stmpe811_TS_ITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = stmpe811_TS_ITStatus &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stmpe811.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>stmpe811_TS_Start</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stmpe811.o(i.stmpe811_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = stmpe811_TS_Start &rArr; stmpe811_IO_EnableAF &rArr; IOE_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Delay
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_IO_EnableAF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stmpe811.o(.data)
</UL>
<P><STRONG><a name="[296]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2bf]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2a3]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2b3]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationMallocFailedHook))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2c1]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[29b]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[2a8]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[298]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[297]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[29a]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[29c]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2a2]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[2c2]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2bb]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[285]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[2c6]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2ad]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2bd]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2be]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[286]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[2af]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[11a]"></a>vTaskSwitchContext</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[2c0]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[290]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[28e]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[288]"></a>xQueueCreateMutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[287]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[26d]"></a>xQueueGenericCreate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[28f]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
</UL>

<P><STRONG><a name="[2a6]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[28b]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[28a]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[28c]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[28d]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[2c7]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[293]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[292]"></a>xTaskCreateStatic</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[294]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[2c5]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[27b]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2a0]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[2c9]"></a>xTaskPriorityInherit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2ac]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2b1]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[254]"></a>I2Cx_Error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f429i_discovery.o(i.I2Cx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = I2Cx_Error &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_ReadMultiple
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Read
</UL>

<P><STRONG><a name="[255]"></a>I2Cx_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f429i_discovery.o(i.I2Cx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOE_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[257]"></a>I2Cx_MspInit</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f429i_discovery.o(i.I2Cx_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2Cx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[276]"></a>SPIx_Error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f429i_discovery.o(i.SPIx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPIx_Error &rArr; SPIx_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Write
</UL>

<P><STRONG><a name="[260]"></a>SPIx_Init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f429i_discovery.o(i.SPIx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPIx_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>

<P><STRONG><a name="[262]"></a>SPIx_Write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f429i_discovery.o(i.SPIx_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPIx_Write &rArr; SPIx_Error &rArr; SPIx_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, hw_init.o(i.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[1d4]"></a>DMA2D_CopyBuffer</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stemwin_wrapper.o(i.DMA2D_CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelformat
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_CopyRect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_CopyBuffer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap16bpp
</UL>

<P><STRONG><a name="[1d7]"></a>DMA2D_CopyBufferWithAlpha</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stemwin_wrapper.o(i.DMA2D_CopyBufferWithAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_CopyBufferWithAlpha
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelformat
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap32bpp
</UL>

<P><STRONG><a name="[264]"></a>GetBufferSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stemwin_wrapper.o(i.GetBufferSize))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_DrawBitmapAlpha
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap8bpp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap32bpp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_CopyRect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_CopyBuffer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap16bpp
</UL>

<P><STRONG><a name="[1d6]"></a>GetPixelformat</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stemwin_wrapper.o(i.GetPixelformat))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_DrawBitmapAlpha
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap8bpp
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBufferWithAlpha
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>

<P><STRONG><a name="[90]"></a>LCD_LL_CopyBuffer</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, stemwin_wrapper.o(i.LCD_LL_CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_LL_CopyBuffer &rArr; DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[91]"></a>LCD_LL_CopyRect</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, stemwin_wrapper.o(i.LCD_LL_CopyRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_LL_CopyRect &rArr; DMA2D_CopyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[94]"></a>LCD_LL_DrawBitmap32bpp</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, stemwin_wrapper.o(i.LCD_LL_DrawBitmap32bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_LL_DrawBitmap32bpp &rArr; DMA2D_CopyBufferWithAlpha
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBufferWithAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[92]"></a>LCD_LL_DrawBitmap8bpp</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, stemwin_wrapper.o(i.LCD_LL_DrawBitmap8bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_LL_DrawBitmap8bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelformat
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[8f]"></a>LCD_LL_FillRect</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stemwin_wrapper.o(i.LCD_LL_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = LCD_LL_FillRect &rArr; GUI_GetDrawMode &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelformat
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetDrawMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stemwin_wrapper.o(i.LCD_LL_FillRect)
<LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[8e]"></a>TransferComplete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stemwin_wrapper.o(i.TransferComplete))
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.DMA2D_Init)
</UL>
<P><STRONG><a name="[96]"></a>_Color2IndexBulk_M1555I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Color2IndexBulk_M1555I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2IndexBulk_M1555I_DMA2D &rArr; _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[9a]"></a>_Color2IndexBulk_M4444I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Color2IndexBulk_M4444I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2IndexBulk_M4444I_DMA2D &rArr; _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[98]"></a>_Color2IndexBulk_M565_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Color2IndexBulk_M565_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2IndexBulk_M565_DMA2D &rArr; _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[9e]"></a>_Color2IndexBulk_M8888I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Color2IndexBulk_M8888I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2IndexBulk_M8888I_DMA2D &rArr; _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[9c]"></a>_Color2IndexBulk_M888_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Color2IndexBulk_M888_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2IndexBulk_M888_DMA2D &rArr; _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[27e]"></a>_DMA_Color2IndexBulk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stemwin_wrapper.o(i._DMA_Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DMA_Color2IndexBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ConvertColor
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk_M888_DMA2D
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk_M8888I_DMA2D
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk_M565_DMA2D
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk_M4444I_DMA2D
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk_M1555I_DMA2D
</UL>

<P><STRONG><a name="[27f]"></a>_DMA_ConvertColor</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stemwin_wrapper.o(i._DMA_ConvertColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Color2IndexBulk
</UL>

<P><STRONG><a name="[280]"></a>_DMA_DrawAlphaBitmap</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stemwin_wrapper.o(i._DMA_DrawAlphaBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DMA_DrawAlphaBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ExecOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_DrawMemdevAlpha
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_DrawBitmapAlpha
</UL>

<P><STRONG><a name="[1d5]"></a>_DMA_ExecOperation</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stemwin_wrapper.o(i._DMA_ExecOperation))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_DrawAlphaBitmap
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ConvertColor
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_FillRect
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LL_DrawBitmap8bpp
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBufferWithAlpha
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_CopyBuffer
</UL>

<P><STRONG><a name="[281]"></a>_DMA_Index2ColorBulk</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._DMA_Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_ConvertColor
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk_M888_DMA2D
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk_M8888I_DMA2D
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk_M565_DMA2D
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk_M4444I_DMA2D
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk_M1555I_DMA2D
</UL>

<P><STRONG><a name="[95]"></a>_Index2ColorBulk_M1555I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Index2ColorBulk_M1555I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Index2ColorBulk_M1555I_DMA2D &rArr; _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[99]"></a>_Index2ColorBulk_M4444I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Index2ColorBulk_M4444I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Index2ColorBulk_M4444I_DMA2D &rArr; _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[97]"></a>_Index2ColorBulk_M565_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Index2ColorBulk_M565_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Index2ColorBulk_M565_DMA2D &rArr; _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[9d]"></a>_Index2ColorBulk_M8888I_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Index2ColorBulk_M8888I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Index2ColorBulk_M8888I_DMA2D &rArr; _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[9b]"></a>_Index2ColorBulk_M888_DMA2D</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, stemwin_wrapper.o(i._Index2ColorBulk_M888_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Index2ColorBulk_M888_DMA2D &rArr; _DMA_Index2ColorBulk &rArr; _DMA_ConvertColor
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[9f]"></a>_LCD_DrawBitmapAlpha</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, stemwin_wrapper.o(i._LCD_DrawBitmapAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _LCD_DrawBitmapAlpha &rArr; _DMA_DrawAlphaBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_DrawAlphaBitmap
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPixelformat
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[a0]"></a>_LCD_DrawMemdevAlpha</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, stemwin_wrapper.o(i._LCD_DrawMemdevAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _LCD_DrawMemdevAlpha &rArr; _DMA_DrawAlphaBitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DMA_DrawAlphaBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stemwin_wrapper.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[2ba]"></a>stmpe811_GetInstance</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stmpe811.o(i.stmpe811_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stmpe811_Init
</UL>

<P><STRONG><a name="[1f5]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[1f6]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[226]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[215]"></a>LTDC_SetConfig</STRONG> (Thumb, 354 bytes, Stack size 20 bytes, stm32f4xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[253]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[204]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[207]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[209]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[203]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[252]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[205]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[208]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[233]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[235]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[275]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[23d]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[248]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[24a]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[24b]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[23b]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[23c]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[251]"></a>UART_SetConfig</STRONG> (Thumb, 762 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[29d]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[29f]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2a4]"></a>prvInitialiseMutex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[2a5]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[2aa]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2ab]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[295]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[299]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2a1]"></a>prvDeleteTCB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[a2]"></a>prvIdleTask</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[2a7]"></a>prvInitialiseNewTask</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2ca]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[289]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[291]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[2b0]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2b2]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[a1]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[a6]"></a>_Color2Index_1616I</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, GUICC_1616I.o(.text._Color2Index_1616I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_1616I.o(.rodata)
</UL>
<P><STRONG><a name="[a7]"></a>_Index2Color_1616I</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, GUICC_1616I.o(.text._Index2Color_1616I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_1616I.o(.rodata)
</UL>
<P><STRONG><a name="[a8]"></a>_GetIndexMask_1616I</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_1616I.o(.text._GetIndexMask_1616I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_1616I.o(.rodata)
</UL>
<P><STRONG><a name="[a9]"></a>_Color2IndexBulk_1616I</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUICC_1616I.o(.text._Color2IndexBulk_1616I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_1616I.o(.rodata)
</UL>
<P><STRONG><a name="[aa]"></a>_Index2ColorBulk_1616I</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, GUICC_1616I.o(.text._Index2ColorBulk_1616I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_1616I.o(.rodata)
</UL>
<P><STRONG><a name="[ab]"></a>_Color2Index_822216</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, GUICC_822216.o(.text._Color2Index_822216))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_822216.o(.rodata)
</UL>
<P><STRONG><a name="[ac]"></a>_Index2Color_822216</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, GUICC_822216.o(.text._Index2Color_822216))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_822216.o(.rodata)
</UL>
<P><STRONG><a name="[ad]"></a>_GetIndexMask_822216</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_822216.o(.text._GetIndexMask_822216))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_822216.o(.rodata)
</UL>
<P><STRONG><a name="[ae]"></a>_Color2Index_84444</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUICC_84444.o(.text._Color2Index_84444))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_84444.o(.rodata)
</UL>
<P><STRONG><a name="[b0]"></a>_GetIndexMask_84444</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_84444.o(.text._GetIndexMask_84444))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_84444.o(.rodata)
</UL>
<P><STRONG><a name="[af]"></a>_Index2Color_84444</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, GUICC_84444.o(.text._Index2Color_84444))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_84444.o(.rodata)
</UL>
<P><STRONG><a name="[b3]"></a>_GetIndexMask_8666</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_8666.o(.text._GetIndexMask_8666))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666.o(.rodata)
</UL>
<P><STRONG><a name="[b6]"></a>_GetIndexMask_8666_1</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_8666_1.o(.text._GetIndexMask_8666_1))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666_1.o(.rodata)
</UL>
<P><STRONG><a name="[b4]"></a>_Color2Index_8666_1</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, GUICC_8666_1.o(.text._Color2Index_8666_1))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666_1.o(.rodata)
</UL>
<P><STRONG><a name="[b5]"></a>_Index2Color_8666_1</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, GUICC_8666_1.o(.text._Index2Color_8666_1))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8666_1.o(.rodata)
</UL>
<P><STRONG><a name="[b7]"></a>_Color2Index_88666I</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUICC_88666I.o(.text._Color2Index_88666I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_88666I.o(.rodata)
</UL>
<P><STRONG><a name="[b8]"></a>_Index2Color_88666I</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUICC_88666I.o(.text._Index2Color_88666I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_88666I.o(.rodata)
</UL>
<P><STRONG><a name="[b9]"></a>_GetIndexMask_88666I</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_88666I.o(.text._GetIndexMask_88666I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_88666I.o(.rodata)
</UL>
<P><STRONG><a name="[ba]"></a>_Color2IndexBulk_88666I</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUICC_88666I.o(.text._Color2IndexBulk_88666I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_88666I.o(.rodata)
</UL>
<P><STRONG><a name="[bb]"></a>_Index2ColorBulk_88666I</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, GUICC_88666I.o(.text._Index2ColorBulk_88666I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_88666I.o(.rodata)
</UL>
<P><STRONG><a name="[bc]"></a>_Color2Index_M1555I</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text._Color2Index_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M1555I.o(.rodata)
</UL>
<P><STRONG><a name="[bd]"></a>_Index2Color_M1555I</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text._Index2Color_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M1555I.o(.rodata)
</UL>
<P><STRONG><a name="[be]"></a>_GetIndexMask_M1555I</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text._GetIndexMask_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M1555I.o(.rodata)
</UL>
<P><STRONG><a name="[bf]"></a>_Color2IndexBulk_M1555I</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text._Color2IndexBulk_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M1555I.o(.rodata)
</UL>
<P><STRONG><a name="[c0]"></a>_Index2ColorBulk_M1555I</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, GUICC_M1555I.o(.text._Index2ColorBulk_M1555I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M1555I.o(.rodata)
</UL>
<P><STRONG><a name="[c1]"></a>_Color2Index_M4444I</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text._Color2Index_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M4444I.o(.rodata)
</UL>
<P><STRONG><a name="[c2]"></a>_Index2Color_M4444I</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text._Index2Color_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M4444I.o(.rodata)
</UL>
<P><STRONG><a name="[c3]"></a>_GetIndexMask_M4444I</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text._GetIndexMask_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M4444I.o(.rodata)
</UL>
<P><STRONG><a name="[c4]"></a>_Color2IndexBulk_M4444I</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text._Color2IndexBulk_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M4444I.o(.rodata)
</UL>
<P><STRONG><a name="[c5]"></a>_Index2ColorBulk_M4444I</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, GUICC_M4444I.o(.text._Index2ColorBulk_M4444I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M4444I.o(.rodata)
</UL>
<P><STRONG><a name="[c6]"></a>_Color2Index_M8888I</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, GUICC_M8888I.o(.text._Color2Index_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888I.o(.rodata)
</UL>
<P><STRONG><a name="[c8]"></a>_GetIndexMask_M8888I</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M8888I.o(.text._GetIndexMask_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888I.o(.rodata)
</UL>
<P><STRONG><a name="[c9]"></a>_Color2IndexBulk_M8888I</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUICC_M8888I.o(.text._Color2IndexBulk_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888I.o(.rodata)
</UL>
<P><STRONG><a name="[ca]"></a>_Index2ColorBulk_M8888I</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUICC_M8888I.o(.text._Index2ColorBulk_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888I.o(.rodata)
</UL>
<P><STRONG><a name="[cb]"></a>_Color2Index_565</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUICC_565.o(.text._Color2Index_565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_565.o(.rodata)
</UL>
<P><STRONG><a name="[cd]"></a>_GetIndexMask_565</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_565.o(.text._GetIndexMask_565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_565.o(.rodata)
</UL>
<P><STRONG><a name="[ce]"></a>_Color2IndexBulk</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, GUICC_565.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_565.o(.rodata)
</UL>
<P><STRONG><a name="[cf]"></a>_Index2ColorBulk</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, GUICC_565.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_565.o(.rodata)
</UL>
<P><STRONG><a name="[d0]"></a>_Color2Index_888</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUICC_888.o(.text._Color2Index_888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_888.o(.rodata)
</UL>
<P><STRONG><a name="[d2]"></a>_GetIndexMask_888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_888.o(.text._GetIndexMask_888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_888.o(.rodata)
</UL>
<P><STRONG><a name="[d3]"></a>_Color2IndexBulk</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, GUICC_888.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_888.o(.rodata)
</UL>
<P><STRONG><a name="[d4]"></a>_Index2ColorBulk</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, GUICC_888.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_888.o(.rodata)
</UL>
<P><STRONG><a name="[d5]"></a>_Color2Index_8888</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, GUICC_8888.o(.text._Color2Index_8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.rodata)
</UL>
<P><STRONG><a name="[d7]"></a>_GetIndexMask_8888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_8888.o(.text._GetIndexMask_8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.rodata)
</UL>
<P><STRONG><a name="[d8]"></a>_Color2IndexBulk</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUICC_8888.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.rodata)
</UL>
<P><STRONG><a name="[d9]"></a>_Index2ColorBulk</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUICC_8888.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.rodata)
</UL>
<P><STRONG><a name="[da]"></a>_Color2Index_M565</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, GUICC_M565.o(.text._Color2Index_M565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.rodata)
</UL>
<P><STRONG><a name="[dc]"></a>_GetIndexMask_M565</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M565.o(.text._GetIndexMask_M565))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.rodata)
</UL>
<P><STRONG><a name="[dd]"></a>_Color2IndexBulk</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, GUICC_M565.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.rodata)
</UL>
<P><STRONG><a name="[de]"></a>_Index2ColorBulk</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, GUICC_M565.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.rodata)
</UL>
<P><STRONG><a name="[df]"></a>_Color2Index_M888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M888.o(.text._Color2Index_M888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M888.o(.rodata)
</UL>
<P><STRONG><a name="[e1]"></a>_GetIndexMask_M888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M888.o(.text._GetIndexMask_M888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M888.o(.rodata)
</UL>
<P><STRONG><a name="[e2]"></a>_Color2IndexBulk</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUICC_M888.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M888.o(.rodata)
</UL>
<P><STRONG><a name="[e3]"></a>_Index2ColorBulk</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUICC_M888.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M888.o(.rodata)
</UL>
<P><STRONG><a name="[e4]"></a>_Color2Index_M8888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M8888.o(.text._Color2Index_M8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888.o(.rodata)
</UL>
<P><STRONG><a name="[e6]"></a>_GetIndexMask_M8888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M8888.o(.text._GetIndexMask_M8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888.o(.rodata)
</UL>
<P><STRONG><a name="[e7]"></a>_Color2IndexBulk</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUICC_M8888.o(.text._Color2IndexBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888.o(.rodata)
</UL>
<P><STRONG><a name="[e8]"></a>_Index2ColorBulk</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUICC_M8888.o(.text._Index2ColorBulk))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888.o(.rodata)
</UL>
<P><STRONG><a name="[e5]"></a>_Index2Color_M8888</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUICC_M8888.o(.text._Index2Color_M8888))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M8888.o(.rodata)
</UL>
<P><STRONG><a name="[13c]"></a>_AddFreeMemory</STRONG> (Thumb, 860 bytes, Stack size unknown bytes, GUI_Alloc.o(.text._AddFreeMemory))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
</UL>

<P><STRONG><a name="[13e]"></a>_RemoveHoles</STRONG> (Thumb, 432 bytes, Stack size unknown bytes, GUI_Alloc.o(.text._RemoveHoles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _RemoveHoles &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[13d]"></a>_EnlargeBlocks</STRONG> (Thumb, 220 bytes, Stack size unknown bytes, GUI_Alloc.o(.text._EnlargeBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[138]"></a>_Alloc</STRONG> (Thumb, 884 bytes, Stack size unknown bytes, GUI_Alloc.o(.text._Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _Alloc &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>

<P><STRONG><a name="[15f]"></a>_InitContext</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, GUI_Core.o(.text._InitContext))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[77]"></a>_OnExit</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, GUI_Core.o(.text._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.text.GUI__Config)
</UL>
<P><STRONG><a name="[146]"></a>GUI_DispString.part.0</STRONG> (Thumb, 296 bytes, Stack size unknown bytes, GUI_DispString.o(.text.GUI_DispString.part.0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = GUI_DispString.part.0 &rArr; GUI_GetFontDistY &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[ec]"></a>_SetBkColor</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, LCD.o(.text._SetBkColor))
<BR>[Address Reference Count : 1]<UL><LI> LCD.o(.rodata)
</UL>
<P><STRONG><a name="[eb]"></a>_SetColor</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, LCD.o(.text._SetColor))
<BR>[Address Reference Count : 1]<UL><LI> LCD.o(.rodata)
</UL>
<P><STRONG><a name="[ed]"></a>_SetDrawMode</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, LCD.o(.text._SetDrawMode))
<BR>[Address Reference Count : 1]<UL><LI> LCD.o(.rodata)
</UL>
<P><STRONG><a name="[f9]"></a>_GetRect</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetRect))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[f3]"></a>_SetPixelIndex</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetPixelIndex))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[f2]"></a>_GetPixelIndex</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetPixelIndex))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[f4]"></a>_XorPixel</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._XorPixel))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[f7]"></a>_GetDevProp</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[f8]"></a>_GetDevData</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[80]"></a>_ReadRect</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._ReadRect))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[f6]"></a>_GetDevFunc</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[7b]"></a>_SetVRAMAddr</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetVRAMAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetVRAMAddr &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[7c]"></a>_SetVis</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetVis))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetVis &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[7d]"></a>_GetPos</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._GetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _GetPos &rArr; GUI_ALLOC_GetFixedBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[7e]"></a>_SetPos</STRONG> (Thumb, 368 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetPos &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeDisplay
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeDisplay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[7f]"></a>_SetAlpha</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetAlpha &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[81]"></a>_SetVRAM_BufferPTR</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetVRAM_BufferPTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _SetVRAM_BufferPTR &rArr; GUI_ALLOC_GetFixedBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[82]"></a>_ShowBuffer</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._ShowBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _ShowBuffer &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[83]"></a>_CopyBuffer</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _CopyBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[84]"></a>_SetDevFunc</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetDevFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _SetDevFunc &rArr; GUI_ALLOC_GetFixedBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[85]"></a>_SetChroma</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetChroma))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetChroma &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[86]"></a>_SetChromaMode</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetChromaMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetChromaMode &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[87]"></a>_SetAlphaMode</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetAlphaMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetAlphaMode &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[88]"></a>_Off</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Off &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[89]"></a>_On</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._On))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _On &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[8a]"></a>_Init</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _Init &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[8b]"></a>_SetSize</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetSize &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[8c]"></a>_SetVSize</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetVSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _SetVSize &rArr; GUI_ALLOC_GetFixedBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[f5]"></a>_SetOrg</STRONG> (Thumb, 206 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _SetOrg &rArr; LCD_X_DisplayDriver &rArr; GUI_GetLayerPosEx &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[f1]"></a>_FillRect</STRONG> (Thumb, 628 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._FillRect))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[ef]"></a>_DrawHLine</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._DrawHLine))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[f0]"></a>_DrawVLine</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._DrawVLine))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[ee]"></a>_DrawBitmap</STRONG> (Thumb, 1838 bytes, Stack size unknown bytes, GUIDRV_Lin_16.o(.text._DrawBitmap))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.rodata)
</UL>
<P><STRONG><a name="[79]"></a>_OnExit</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, WM.o(.text._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> WM.o(.text.WM_Init)
</UL>
<P><STRONG><a name="[1bf]"></a>_Findy1</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, WM.o(.text._Findy1))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1.constprop.11
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[1be]"></a>_Findx0</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, WM.o(.text._Findx0))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0.constprop.10
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>

<P><STRONG><a name="[1b9]"></a>_Findx1</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, WM.o(.text._Findx1))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>

<P><STRONG><a name="[1b7]"></a>_Findx0.constprop.10</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, WM.o(.text._Findx0.constprop.10))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[1ba]"></a>_Findy1.constprop.11</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, WM.o(.text._Findy1.constprop.11))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[1b1]"></a>_Invalidate1Abs</STRONG> (Thumb, 236 bytes, Stack size unknown bytes, WM.o(.text._Invalidate1Abs))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>

<P><STRONG><a name="[1a8]"></a>WM_InvalidateRect.part.2</STRONG> (Thumb, 220 bytes, Stack size unknown bytes, WM.o(.text.WM_InvalidateRect.part.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = WM_InvalidateRect.part.2 &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[7a]"></a>_cbBackWin</STRONG> (Thumb, 176 bytes, Stack size unknown bytes, WM.o(.text._cbBackWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _cbBackWin &rArr; GUI_SetBkColor &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect.part.2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM.o(.text.WM_Init)
</UL>
<P><STRONG><a name="[fe]"></a>_Color2Index_16</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, GUICC_16.o(.text._Color2Index_16))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_16.o(.rodata)
</UL>
<P><STRONG><a name="[ff]"></a>_Index2Color_16</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUICC_16.o(.text._Index2Color_16))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_16.o(.rodata)
</UL>
<P><STRONG><a name="[100]"></a>_GetIndexMask_16</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUICC_16.o(.text._GetIndexMask_16))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_16.o(.rodata)
</UL>
<P><STRONG><a name="[c]"></a>_Log2VisBuffered</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, GUI_CharLine.o(.text._Log2VisBuffered))
<BR>[Address Reference Count : 1]<UL><LI> GUI_CharLine.o(.data)
</UL>
<P><STRONG><a name="[187]"></a>_DispLine</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, GUI_CharLine.o(.text._DispLine))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[76]"></a>_OnExit</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, GUI_Task.o(.text._OnExit))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_Task.o(.text.GUITASK_Init)
</UL>
<P><STRONG><a name="[101]"></a>_GetCharCode</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_UC_EncodeNone.o(.text._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.rodata)
</UL>
<P><STRONG><a name="[102]"></a>_GetCharSize</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_UC_EncodeNone.o(.text._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.rodata)
</UL>
<P><STRONG><a name="[103]"></a>_CalcSizeOfChar</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, GUI_UC_EncodeNone.o(.text._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.rodata)
</UL>
<P><STRONG><a name="[104]"></a>_Encode</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, GUI_UC_EncodeNone.o(.text._Encode))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.rodata)
</UL>
<P><STRONG><a name="[78]"></a>_OnExit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, LCD_Color.o(.text._OnExit))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> LCD_Color.o(.text.LCD_InitColors)
</UL>
<P><STRONG><a name="[113]"></a>_GetDevData</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[111]"></a>_GetDevFunc</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[110]"></a>_SetOrg</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[114]"></a>_GetRect</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._GetRect))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[109]"></a>_DrawBitmap</STRONG> (Thumb, 2612 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._DrawBitmap))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[112]"></a>_GetDevProp</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[10d]"></a>_GetPixelIndex</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._GetPixelIndex))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[10e]"></a>_SetPixelIndex</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._SetPixelIndex))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[10f]"></a>_XorPixel</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._XorPixel))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[10c]"></a>_FillRect</STRONG> (Thumb, 364 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._FillRect))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[10a]"></a>_DrawHLine</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._DrawHLine))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[10b]"></a>_DrawVLine</STRONG> (Thumb, 228 bytes, Stack size unknown bytes, GUIDEV_16.o(.text._DrawVLine))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.rodata)
</UL>
<P><STRONG><a name="[117]"></a>_GetIndexMask_0</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, GUICC_0.o(.text._GetIndexMask_0))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_0.o(.rodata)
</UL>
<P><STRONG><a name="[116]"></a>_Index2Color_0</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, GUICC_0.o(.text._Index2Color_0))
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_0.o(.rodata)
</UL>
<P><STRONG><a name="[115]"></a>_Color2Index_0</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, GUICC_0.o(.text._Color2Index_0))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CalcColorDist
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_0.o(.rodata)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
